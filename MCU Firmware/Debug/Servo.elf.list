
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00001664  20000000  08003d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cfc  20001664  080053c0  00021664  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002360  080053c0  00022360  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00021664  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011593  00000000  00000000  0002168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b79  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008e9c  00000000  00000000  00035799  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e60  00000000  00000000  0003e638  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cf8  00000000  00000000  0003f498  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005e42  00000000  00000000  00040190  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003da4  00000000  00000000  00045fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00049d76  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002620  00000000  00000000  00049df4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20001664 	.word	0x20001664
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bbc 	.word	0x08003bbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20001668 	.word	0x20001668
 8000148:	08003bbc 	.word	0x08003bbc

0800014c <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800014c:	2312      	movs	r3, #18
 800014e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000150:	4800      	ldr	r0, [pc, #0]	; (8000154 <USBD_FS_DeviceDescriptor+0x8>)
 8000152:	4770      	bx	lr
 8000154:	20000020 	.word	0x20000020

08000158 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8000158:	2304      	movs	r3, #4
 800015a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800015c:	4800      	ldr	r0, [pc, #0]	; (8000160 <USBD_FS_LangIDStrDescriptor+0x8>)
 800015e:	4770      	bx	lr
 8000160:	2000001c 	.word	0x2000001c

08000164 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000164:	b508      	push	{r3, lr}
 8000166:	460a      	mov	r2, r1
  if(speed == 0)
 8000168:	b920      	cbnz	r0, 8000174 <USBD_FS_ProductStrDescriptor+0x10>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800016a:	4905      	ldr	r1, [pc, #20]	; (8000180 <USBD_FS_ProductStrDescriptor+0x1c>)
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <USBD_FS_ProductStrDescriptor+0x20>)
 800016e:	f000 fe23 	bl	8000db8 <USBD_GetString>
 8000172:	e003      	b.n	800017c <USBD_FS_ProductStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8000174:	4902      	ldr	r1, [pc, #8]	; (8000180 <USBD_FS_ProductStrDescriptor+0x1c>)
 8000176:	4803      	ldr	r0, [pc, #12]	; (8000184 <USBD_FS_ProductStrDescriptor+0x20>)
 8000178:	f000 fe1e 	bl	8000db8 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 800017c:	4800      	ldr	r0, [pc, #0]	; (8000180 <USBD_FS_ProductStrDescriptor+0x1c>)
 800017e:	bd08      	pop	{r3, pc}
 8000180:	200018dc 	.word	0x200018dc
 8000184:	08003be8 	.word	0x08003be8

08000188 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000188:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800018a:	4c04      	ldr	r4, [pc, #16]	; (800019c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800018c:	460a      	mov	r2, r1
 800018e:	4621      	mov	r1, r4
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000192:	f000 fe11 	bl	8000db8 <USBD_GetString>
  return USBD_StrDesc;
}
 8000196:	4620      	mov	r0, r4
 8000198:	bd10      	pop	{r4, pc}
 800019a:	bf00      	nop
 800019c:	200018dc 	.word	0x200018dc
 80001a0:	08003bfc 	.word	0x08003bfc

080001a4 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80001a4:	b508      	push	{r3, lr}
 80001a6:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 80001a8:	b920      	cbnz	r0, 80001b4 <USBD_FS_SerialStrDescriptor+0x10>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80001aa:	4905      	ldr	r1, [pc, #20]	; (80001c0 <USBD_FS_SerialStrDescriptor+0x1c>)
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <USBD_FS_SerialStrDescriptor+0x20>)
 80001ae:	f000 fe03 	bl	8000db8 <USBD_GetString>
 80001b2:	e003      	b.n	80001bc <USBD_FS_SerialStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 80001b4:	4902      	ldr	r1, [pc, #8]	; (80001c0 <USBD_FS_SerialStrDescriptor+0x1c>)
 80001b6:	4803      	ldr	r0, [pc, #12]	; (80001c4 <USBD_FS_SerialStrDescriptor+0x20>)
 80001b8:	f000 fdfe 	bl	8000db8 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 80001bc:	4800      	ldr	r0, [pc, #0]	; (80001c0 <USBD_FS_SerialStrDescriptor+0x1c>)
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	200018dc 	.word	0x200018dc
 80001c4:	08003c14 	.word	0x08003c14

080001c8 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80001c8:	b508      	push	{r3, lr}
 80001ca:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 80001cc:	b920      	cbnz	r0, 80001d8 <USBD_FS_ConfigStrDescriptor+0x10>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80001ce:	4905      	ldr	r1, [pc, #20]	; (80001e4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80001d0:	4805      	ldr	r0, [pc, #20]	; (80001e8 <USBD_FS_ConfigStrDescriptor+0x20>)
 80001d2:	f000 fdf1 	bl	8000db8 <USBD_GetString>
 80001d6:	e003      	b.n	80001e0 <USBD_FS_ConfigStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 80001d8:	4902      	ldr	r1, [pc, #8]	; (80001e4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <USBD_FS_ConfigStrDescriptor+0x20>)
 80001dc:	f000 fdec 	bl	8000db8 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 80001e0:	4800      	ldr	r0, [pc, #0]	; (80001e4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	200018dc 	.word	0x200018dc
 80001e8:	08003c24 	.word	0x08003c24

080001ec <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80001ec:	b508      	push	{r3, lr}
 80001ee:	460a      	mov	r2, r1
  if(speed == 0)
 80001f0:	b920      	cbnz	r0, 80001fc <USBD_FS_InterfaceStrDescriptor+0x10>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80001f2:	4905      	ldr	r1, [pc, #20]	; (8000208 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <USBD_FS_InterfaceStrDescriptor+0x20>)
 80001f6:	f000 fddf 	bl	8000db8 <USBD_GetString>
 80001fa:	e003      	b.n	8000204 <USBD_FS_InterfaceStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80001fc:	4902      	ldr	r1, [pc, #8]	; (8000208 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8000200:	f000 fdda 	bl	8000db8 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 8000204:	4800      	ldr	r0, [pc, #0]	; (8000208 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8000206:	bd08      	pop	{r3, pc}
 8000208:	200018dc 	.word	0x200018dc
 800020c:	08003c30 	.word	0x08003c30

08000210 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8000210:	6802      	ldr	r2, [r0, #0]
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <HAL_PCD_MspInit+0x3c>)
 8000214:	429a      	cmp	r2, r3
 8000216:	d117      	bne.n	8000248 <HAL_PCD_MspInit+0x38>
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000218:	b500      	push	{lr}
 800021a:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800021c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000220:	69da      	ldr	r2, [r3, #28]
 8000222:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000226:	61da      	str	r2, [r3, #28]
 8000228:	69db      	ldr	r3, [r3, #28]
 800022a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2102      	movs	r1, #2
 8000236:	2014      	movs	r0, #20
 8000238:	f003 f9d2 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800023c:	2014      	movs	r0, #20
 800023e:	f003 fa01 	bl	8003644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000242:	b003      	add	sp, #12
 8000244:	f85d fb04 	ldr.w	pc, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40005c00 	.word	0x40005c00

08000250 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8000250:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000252:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8000256:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800025a:	f000 fe07 	bl	8000e6c <USBD_LL_SetupStage>
 800025e:	bd08      	pop	{r3, pc}

08000260 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000260:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000262:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8000266:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800026a:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800026e:	f000 fe2b 	bl	8000ec8 <USBD_LL_DataOutStage>
 8000272:	bd08      	pop	{r3, pc}

08000274 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000274:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000276:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800027a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800027c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000280:	f000 fe56 	bl	8000f30 <USBD_LL_DataInStage>
 8000284:	bd08      	pop	{r3, pc}
 8000286:	bf00      	nop

08000288 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8000288:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800028a:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800028e:	f000 fed9 	bl	8001044 <USBD_LL_SOF>
 8000292:	bd08      	pop	{r3, pc}

08000294 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8000294:	b510      	push	{r4, lr}
 8000296:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8000298:	2101      	movs	r1, #1
 800029a:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 800029e:	f000 febd 	bl	800101c <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80002a2:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 80002a6:	f000 fe99 	bl	8000fdc <USBD_LL_Reset>
 80002aa:	bd10      	pop	{r4, pc}

080002ac <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80002b0:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80002b4:	f000 feb6 	bl	8001024 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 80002b8:	69a3      	ldr	r3, [r4, #24]
 80002ba:	b123      	cbz	r3, 80002c6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80002bc:	4a02      	ldr	r2, [pc, #8]	; (80002c8 <HAL_PCD_SuspendCallback+0x1c>)
 80002be:	6913      	ldr	r3, [r2, #16]
 80002c0:	f043 0306 	orr.w	r3, r3, #6
 80002c4:	6113      	str	r3, [r2, #16]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80002cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80002ce:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 80002d2:	f000 feb1 	bl	8001038 <USBD_LL_Resume>
 80002d6:	bd08      	pop	{r3, pc}

080002d8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80002d8:	b510      	push	{r4, lr}
 80002da:	4604      	mov	r4, r0
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 80002dc:	481d      	ldr	r0, [pc, #116]	; (8000354 <USBD_LL_Init+0x7c>)
 80002de:	f8c0 441c 	str.w	r4, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;
 80002e2:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <USBD_LL_Init+0x80>)
 80002e8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80002ea:	2308      	movs	r3, #8
 80002ec:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80002ee:	2302      	movs	r3, #2
 80002f0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80002f6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80002f8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80002fa:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80002fc:	f002 fbf4 	bl	8002ae8 <HAL_PCD_Init>
 8000300:	b108      	cbz	r0, 8000306 <USBD_LL_Init+0x2e>
  {
    Error_Handler();
 8000302:	f000 fa1b 	bl	800073c <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8000306:	2318      	movs	r3, #24
 8000308:	2200      	movs	r2, #0
 800030a:	4611      	mov	r1, r2
 800030c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8000310:	f002 fbce 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8000314:	2358      	movs	r3, #88	; 0x58
 8000316:	2200      	movs	r2, #0
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800031e:	f002 fbc7 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8000322:	23c0      	movs	r3, #192	; 0xc0
 8000324:	2200      	movs	r2, #0
 8000326:	2181      	movs	r1, #129	; 0x81
 8000328:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800032c:	f002 fbc0 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8000330:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000334:	2200      	movs	r2, #0
 8000336:	2101      	movs	r1, #1
 8000338:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800033c:	f002 fbb8 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8000340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000344:	2200      	movs	r2, #0
 8000346:	2182      	movs	r1, #130	; 0x82
 8000348:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800034c:	f002 fbb0 	bl	8002ab0 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8000350:	2000      	movs	r0, #0
 8000352:	bd10      	pop	{r4, pc}
 8000354:	20001adc 	.word	0x20001adc
 8000358:	40005c00 	.word	0x40005c00

0800035c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800035c:	b508      	push	{r3, lr}
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 800035e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000362:	f002 fc2f 	bl	8002bc4 <HAL_PCD_Start>
  return USBD_OK;
}
 8000366:	2000      	movs	r0, #0
 8000368:	bd08      	pop	{r3, pc}
 800036a:	bf00      	nop

0800036c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 800036c:	b510      	push	{r4, lr}
 800036e:	461c      	mov	r4, r3
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 8000370:	4613      	mov	r3, r2
 8000372:	4622      	mov	r2, r4
 8000374:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000378:	f002 fc50 	bl	8002c1c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
}
 800037c:	2000      	movs	r0, #0
 800037e:	bd10      	pop	{r4, pc}

08000380 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000380:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000382:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000386:	f002 fc73 	bl	8002c70 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 800038a:	2000      	movs	r0, #0
 800038c:	bd08      	pop	{r3, pc}
 800038e:	bf00      	nop

08000390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000390:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000392:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000396:	f002 ffc9 	bl	800332c <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 800039a:	2000      	movs	r0, #0
 800039c:	bd08      	pop	{r3, pc}
 800039e:	bf00      	nop

080003a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80003a0:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80003a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80003a6:	f002 ffef 	bl	8003388 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80003aa:	2000      	movs	r0, #0
 80003ac:	bd08      	pop	{r3, pc}
 80003ae:	bf00      	nop

080003b0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80003b0:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 80003b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80003b8:	d006      	beq.n	80003c8 <USBD_LL_IsStallEP+0x18>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80003ba:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80003be:	eb02 1143 	add.w	r1, r2, r3, lsl #5
 80003c2:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 80003c6:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80003c8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80003cc:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 80003d0:	f891 020a 	ldrb.w	r0, [r1, #522]	; 0x20a
  }
}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80003d8:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 80003da:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80003de:	f002 fc09 	bl	8002bf4 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 80003e2:	2000      	movs	r0, #0
 80003e4:	bd08      	pop	{r3, pc}
 80003e6:	bf00      	nop

080003e8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80003e8:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 80003ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80003ee:	f002 fc9b 	bl	8002d28 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 80003f2:	2000      	movs	r0, #0
 80003f4:	bd08      	pop	{r3, pc}
 80003f6:	bf00      	nop

080003f8 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80003f8:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 80003fa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80003fe:	f002 fc5f 	bl	8002cc0 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8000402:	2000      	movs	r0, #0
 8000404:	bd08      	pop	{r3, pc}
 8000406:	bf00      	nop

08000408 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8000408:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800040a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800040e:	f002 fc83 	bl	8002d18 <HAL_PCD_EP_GetRxCount>
}
 8000412:	bd08      	pop	{r3, pc}

08000414 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];//On 32-bit boundary
  return mem;
}
 8000414:	4800      	ldr	r0, [pc, #0]	; (8000418 <USBD_static_malloc+0x4>)
 8000416:	4770      	bx	lr
 8000418:	20001680 	.word	0x20001680

0800041c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800041c:	b508      	push	{r3, lr}
  free(p);
 800041e:	f003 fa01 	bl	8003824 <free>
 8000422:	bd08      	pop	{r3, pc}

08000424 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop

08000428 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8000428:	2000      	movs	r0, #0
 800042a:	4770      	bx	lr

0800042c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800042c:	2000      	movs	r0, #0
 800042e:	4770      	bx	lr

08000430 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8000430:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &receive_buffer[0]);
 8000432:	4c06      	ldr	r4, [pc, #24]	; (800044c <CDC_Receive_FS+0x1c>)
 8000434:	4906      	ldr	r1, [pc, #24]	; (8000450 <CDC_Receive_FS+0x20>)
 8000436:	4620      	mov	r0, r4
 8000438:	f000 ff12 	bl	8001260 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800043c:	4620      	mov	r0, r4
 800043e:	f000 ff2d 	bl	800129c <USBD_CDC_ReceivePacket>
  Process_USB_Data();
 8000442:	f000 f953 	bl	80006ec <Process_USB_Data>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	bf00      	nop
 800044c:	20001efc 	.word	0x20001efc
 8000450:	20000848 	.word	0x20000848

08000454 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8000454:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  /*USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);*/
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, transmit_buffer, 0);
 8000456:	4c06      	ldr	r4, [pc, #24]	; (8000470 <CDC_Init_FS+0x1c>)
 8000458:	2200      	movs	r2, #0
 800045a:	4906      	ldr	r1, [pc, #24]	; (8000474 <CDC_Init_FS+0x20>)
 800045c:	4620      	mov	r0, r4
 800045e:	f000 fef7 	bl	8001250 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, receive_buffer);
 8000462:	4905      	ldr	r1, [pc, #20]	; (8000478 <CDC_Init_FS+0x24>)
 8000464:	4620      	mov	r0, r4
 8000466:	f000 fefb 	bl	8001260 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	bf00      	nop
 8000470:	20001efc 	.word	0x20001efc
 8000474:	20000044 	.word	0x20000044
 8000478:	20000848 	.word	0x20000848

0800047c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <CDC_Transmit_FS+0x28>)
 800047e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if (hcdc->TxState != 0){
 8000482:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000486:	b953      	cbnz	r3, 800049e <CDC_Transmit_FS+0x22>
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000488:	b510      	push	{r4, lr}
 800048a:	460a      	mov	r2, r1
 800048c:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0){
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800048e:	4c05      	ldr	r4, [pc, #20]	; (80004a4 <CDC_Transmit_FS+0x28>)
 8000490:	4620      	mov	r0, r4
 8000492:	f000 fedd 	bl	8001250 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000496:	4620      	mov	r0, r4
 8000498:	f000 fee8 	bl	800126c <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */ 
  return result;
 800049c:	bd10      	pop	{r4, pc}
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0){
    return USBD_BUSY;
 800049e:	2001      	movs	r0, #1
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20001efc 	.word	0x20001efc

080004a8 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 80004a8:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80004aa:	4c09      	ldr	r4, [pc, #36]	; (80004d0 <MX_USB_DEVICE_Init+0x28>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	4909      	ldr	r1, [pc, #36]	; (80004d4 <MX_USB_DEVICE_Init+0x2c>)
 80004b0:	4620      	mov	r0, r4
 80004b2:	f000 fc9f 	bl	8000df4 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80004b6:	4908      	ldr	r1, [pc, #32]	; (80004d8 <MX_USB_DEVICE_Init+0x30>)
 80004b8:	4620      	mov	r0, r4
 80004ba:	f000 fcb3 	bl	8000e24 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80004be:	4907      	ldr	r1, [pc, #28]	; (80004dc <MX_USB_DEVICE_Init+0x34>)
 80004c0:	4620      	mov	r0, r4
 80004c2:	f000 febd 	bl	8001240 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80004c6:	4620      	mov	r0, r4
 80004c8:	f000 fcb4 	bl	8000e34 <USBD_Start>
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	bf00      	nop
 80004d0:	20001efc 	.word	0x20001efc
 80004d4:	20000000 	.word	0x20000000
 80004d8:	2000108c 	.word	0x2000108c
 80004dc:	20000034 	.word	0x20000034

080004e0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80004e4:	e7fe      	b.n	80004e4 <HardFault_Handler>
 80004e6:	bf00      	nop

080004e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler>
 80004ea:	bf00      	nop

080004ec <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80004ec:	e7fe      	b.n	80004ec <BusFault_Handler>
 80004ee:	bf00      	nop

080004f0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler>
 80004f2:	bf00      	nop

080004f4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000500:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000502:	f003 f8fd 	bl	8003700 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000506:	f003 f8d1 	bl	80036ac <HAL_SYSTICK_IRQHandler>
 800050a:	bd08      	pop	{r3, pc}

0800050c <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800050c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8000510:	f002 fe62 	bl	80031d8 <HAL_PCD_IRQHandler>
 8000514:	bd08      	pop	{r3, pc}
 8000516:	bf00      	nop
 8000518:	20001adc 	.word	0x20001adc

0800051c <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 800051c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800051e:	4802      	ldr	r0, [pc, #8]	; (8000528 <TIM2_IRQHandler+0xc>)
 8000520:	f001 fcc2 	bl	8001ea8 <HAL_TIM_IRQHandler>
 8000524:	bd08      	pop	{r3, pc}
 8000526:	bf00      	nop
 8000528:	20002120 	.word	0x20002120

0800052c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b500      	push	{lr}
 800052e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <HAL_MspInit+0x88>)
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	f042 0201 	orr.w	r2, r2, #1
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f003 f839 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	4611      	mov	r1, r2
 800054e:	f06f 000b 	mvn.w	r0, #11
 8000552:	f003 f845 	bl	80035e0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	4611      	mov	r1, r2
 800055a:	f06f 000a 	mvn.w	r0, #10
 800055e:	f003 f83f 	bl	80035e0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	4611      	mov	r1, r2
 8000566:	f06f 0009 	mvn.w	r0, #9
 800056a:	f003 f839 	bl	80035e0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	4611      	mov	r1, r2
 8000572:	f06f 0004 	mvn.w	r0, #4
 8000576:	f003 f833 	bl	80035e0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	4611      	mov	r1, r2
 800057e:	f06f 0003 	mvn.w	r0, #3
 8000582:	f003 f82d 	bl	80035e0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	4611      	mov	r1, r2
 800058a:	f06f 0001 	mvn.w	r0, #1
 800058e:	f003 f827 	bl	80035e0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	4611      	mov	r1, r2
 8000596:	f04f 30ff 	mov.w	r0, #4294967295
 800059a:	f003 f821 	bl	80035e0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_MspInit+0x8c>)
 80005a0:	6853      	ldr	r3, [r2, #4]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005aa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	b003      	add	sp, #12
 80005ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80005bc:	6803      	ldr	r3, [r0, #0]
 80005be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c2:	d117      	bne.n	80005f4 <HAL_TIM_Base_MspInit+0x38>

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c4:	b500      	push	{lr}
 80005c6:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80005cc:	69da      	ldr	r2, [r3, #28]
 80005ce:	f042 0201 	orr.w	r2, r2, #1
 80005d2:	61da      	str	r2, [r3, #28]
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2101      	movs	r1, #1
 80005e2:	201c      	movs	r0, #28
 80005e4:	f002 fffc 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005e8:	201c      	movs	r0, #28
 80005ea:	f003 f82b 	bl	8003644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ee:	b003      	add	sp, #12
 80005f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80005f8:	b510      	push	{r4, lr}
 80005fa:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_GPIO_Init+0x64>)
 80005fe:	699a      	ldr	r2, [r3, #24]
 8000600:	f042 0220 	orr.w	r2, r2, #32
 8000604:	619a      	str	r2, [r3, #24]
 8000606:	699a      	ldr	r2, [r3, #24]
 8000608:	f002 0220 	and.w	r2, r2, #32
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000610:	699a      	ldr	r2, [r3, #24]
 8000612:	f042 0210 	orr.w	r2, r2, #16
 8000616:	619a      	str	r2, [r3, #24]
 8000618:	699a      	ldr	r2, [r3, #24]
 800061a:	f002 0210 	and.w	r2, r2, #16
 800061e:	9202      	str	r2, [sp, #8]
 8000620:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	f042 0204 	orr.w	r2, r2, #4
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	9303      	str	r3, [sp, #12]
 8000632:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SERVO_PULSE_OUT_Pin|USB_DISC_Pin, GPIO_PIN_RESET);
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <MX_GPIO_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800063c:	4620      	mov	r0, r4
 800063e:	f002 ffb7 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SERVO_PULSE_OUT_Pin USB_DISC_Pin */
  GPIO_InitStruct.Pin = SERVO_PULSE_OUT_Pin|USB_DISC_Pin;
 8000642:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000646:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2302      	movs	r3, #2
 800064e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000650:	a904      	add	r1, sp, #16
 8000652:	4620      	mov	r0, r4
 8000654:	f002 fec0 	bl	80033d8 <HAL_GPIO_Init>

}
 8000658:	b008      	add	sp, #32
 800065a:	bd10      	pop	{r4, pc}
 800065c:	40021000 	.word	0x40021000
 8000660:	40011000 	.word	0x40011000

08000664 <cparabn>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void cparabn(uint8_t *source, uint8_t *destination, long count, long aposition, long bposition){
 8000664:	b4f0      	push	{r4, r5, r6, r7}
 8000666:	9f04      	ldr	r7, [sp, #16]
	uint16_t i = 0;
 8000668:	2400      	movs	r4, #0
	while (i != count){
 800066a:	e005      	b.n	8000678 <cparabn+0x14>
		destination[bposition+i] = source[aposition+i];
 800066c:	19e5      	adds	r5, r4, r7
 800066e:	18e6      	adds	r6, r4, r3
 8000670:	5d86      	ldrb	r6, [r0, r6]
 8000672:	554e      	strb	r6, [r1, r5]
		i++;
 8000674:	3401      	adds	r4, #1
 8000676:	b2a4      	uxth	r4, r4
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void cparabn(uint8_t *source, uint8_t *destination, long count, long aposition, long bposition){
	uint16_t i = 0;
	while (i != count){
 8000678:	4294      	cmp	r4, r2
 800067a:	d1f7      	bne.n	800066c <cparabn+0x8>
		destination[bposition+i] = source[aposition+i];
		i++;
	}
}
 800067c:	bcf0      	pop	{r4, r5, r6, r7}
 800067e:	4770      	bx	lr

08000680 <HAL_TIM_PeriodElapsedCallback>:
uint8_t receive_buffer[2048]  = "{000}\n"; //Example content
char 		temp_buf[512];
int 		servo_deg = 0;

int acsr = 1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *stim){
 8000680:	b508      	push	{r3, lr}
	if (acsr == 1){
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d115      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_WritePin(GPIOC, SERVO_PULSE_OUT_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4814      	ldr	r0, [pc, #80]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000690:	f002 ff8e 	bl	80035b0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_AUTORELOAD(&htim2,1000+(servo_deg*20));
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80006a0:	0093      	lsls	r3, r2, #2
 80006a2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80006a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80006a8:	60c3      	str	r3, [r0, #12]
		HAL_TIM_Base_Start_IT(&htim2);
 80006aa:	f001 fb5d 	bl	8001d68 <HAL_TIM_Base_Start_IT>
		acsr = 0;
 80006ae:	2200      	movs	r2, #0
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	bd08      	pop	{r3, pc}
	}
	else if (acsr == 0){
 80006b6:	b97b      	cbnz	r3, 80006d8 <HAL_TIM_PeriodElapsedCallback+0x58>
		HAL_GPIO_WritePin(GPIOC, SERVO_PULSE_OUT_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006be:	f002 ff77 	bl	80035b0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_AUTORELOAD(&htim2,36000);
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006c4:	6802      	ldr	r2, [r0, #0]
 80006c6:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80006ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006cc:	60c3      	str	r3, [r0, #12]
		HAL_TIM_Base_Start_IT(&htim2);
 80006ce:	f001 fb4b 	bl	8001d68 <HAL_TIM_Base_Start_IT>
		acsr = 1;
 80006d2:	2201      	movs	r2, #1
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	bd08      	pop	{r3, pc}
 80006da:	bf00      	nop
 80006dc:	20000844 	.word	0x20000844
 80006e0:	40011000 	.word	0x40011000
 80006e4:	20002120 	.word	0x20002120
 80006e8:	200018a0 	.word	0x200018a0

080006ec <Process_USB_Data>:
	}
}
void Process_USB_Data(){
	if (receive_buffer[0] == '{'){
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <Process_USB_Data+0x40>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b7b      	cmp	r3, #123	; 0x7b
 80006f2:	d11a      	bne.n	800072a <Process_USB_Data+0x3e>
		if (receive_buffer[4] == '}'){
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <Process_USB_Data+0x40>)
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	2b7d      	cmp	r3, #125	; 0x7d
 80006fa:	d116      	bne.n	800072a <Process_USB_Data+0x3e>
		__HAL_TIM_SET_AUTORELOAD(&htim2,36000);
		HAL_TIM_Base_Start_IT(&htim2);
		acsr = 1;
	}
}
void Process_USB_Data(){
 80006fc:	b510      	push	{r4, lr}
 80006fe:	b082      	sub	sp, #8
	if (receive_buffer[0] == '{'){
		if (receive_buffer[4] == '}'){
			temp_buf[3] = 0;
 8000700:	4c0b      	ldr	r4, [pc, #44]	; (8000730 <Process_USB_Data+0x44>)
 8000702:	2300      	movs	r3, #0
 8000704:	70e3      	strb	r3, [r4, #3]
			cparabn(receive_buffer, temp_buf, 3, 1, 0);
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2301      	movs	r3, #1
 800070a:	2203      	movs	r2, #3
 800070c:	4621      	mov	r1, r4
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <Process_USB_Data+0x40>)
 8000710:	f7ff ffa8 	bl	8000664 <cparabn>
			servo_deg = atoi(temp_buf);
 8000714:	4620      	mov	r0, r4
 8000716:	f003 f85a 	bl	80037ce <atoi>
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <Process_USB_Data+0x48>)
 800071c:	6018      	str	r0, [r3, #0]
			//Transmit
			CDC_Transmit_FS(transmit_buffer, TRANSMIT_DATA_LENGTH);
 800071e:	210d      	movs	r1, #13
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <Process_USB_Data+0x4c>)
 8000722:	f7ff feab 	bl	800047c <CDC_Transmit_FS>
		}
	}
}
 8000726:	b002      	add	sp, #8
 8000728:	bd10      	pop	{r4, pc}
 800072a:	4770      	bx	lr
 800072c:	20000848 	.word	0x20000848
 8000730:	2000215c 	.word	0x2000215c
 8000734:	200018a0 	.word	0x200018a0
 8000738:	20000044 	.word	0x20000044

0800073c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	e7fe      	b.n	800073c <Error_Handler>
 800073e:	bf00      	nop

08000740 <MX_TIM2_Init>:
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8000740:	b500      	push	{lr}
 8000742:	b087      	sub	sp, #28

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8000744:	4817      	ldr	r0, [pc, #92]	; (80007a4 <MX_TIM2_Init+0x64>)
 8000746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074a:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 40;
 800074c:	2328      	movs	r3, #40	; 0x28
 800074e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	2300      	movs	r3, #0
 8000752:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 180;
 8000754:	22b4      	movs	r2, #180	; 0xb4
 8000756:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075a:	f001 fc93 	bl	8002084 <HAL_TIM_Base_Init>
 800075e:	b108      	cbz	r0, 8000764 <MX_TIM2_Init+0x24>
  {
    Error_Handler();
 8000760:	f7ff ffec 	bl	800073c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	a906      	add	r1, sp, #24
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_TIM2_Init+0x64>)
 8000770:	f001 fb08 	bl	8001d84 <HAL_TIM_ConfigClockSource>
 8000774:	b108      	cbz	r0, 800077a <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 8000776:	f7ff ffe1 	bl	800073c <Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800077a:	2108      	movs	r1, #8
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MX_TIM2_Init+0x64>)
 800077e:	f001 fc9d 	bl	80020bc <HAL_TIM_OnePulse_Init>
 8000782:	b108      	cbz	r0, 8000788 <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 8000784:	f7ff ffda 	bl	800073c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078e:	4669      	mov	r1, sp
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_TIM2_Init+0x64>)
 8000792:	f001 fa81 	bl	8001c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	b108      	cbz	r0, 800079c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000798:	f7ff ffd0 	bl	800073c <Error_Handler>
  }

}
 800079c:	b007      	add	sp, #28
 800079e:	f85d fb04 	ldr.w	pc, [sp], #4
 80007a2:	bf00      	nop
 80007a4:	20002120 	.word	0x20002120

080007a8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80007a8:	b500      	push	{lr}
 80007aa:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b6:	2200      	movs	r2, #0
 80007b8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2202      	movs	r2, #2
 80007bc:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007c4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	a80a      	add	r0, sp, #40	; 0x28
 80007c8:	f001 fd3a 	bl	8002240 <HAL_RCC_OscConfig>
 80007cc:	b108      	cbz	r0, 80007d2 <SystemClock_Config+0x2a>
  {
    Error_Handler();
 80007ce:	f7ff ffb5 	bl	800073c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2102      	movs	r1, #2
 80007d8:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e2:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	a805      	add	r0, sp, #20
 80007e8:	f002 f86a 	bl	80028c0 <HAL_RCC_ClockConfig>
 80007ec:	b108      	cbz	r0, 80007f2 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80007ee:	f7ff ffa5 	bl	800073c <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007f2:	2310      	movs	r3, #16
 80007f4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007f6:	2300      	movs	r3, #0
 80007f8:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	a801      	add	r0, sp, #4
 80007fc:	f001 fc84 	bl	8002108 <HAL_RCCEx_PeriphCLKConfig>
 8000800:	b108      	cbz	r0, 8000806 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000802:	f7ff ff9b 	bl	800073c <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000806:	f002 f94d 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <SystemClock_Config+0x88>)
 800080c:	fba3 3000 	umull	r3, r0, r3, r0
 8000810:	0980      	lsrs	r0, r0, #6
 8000812:	f002 ff23 	bl	800365c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000816:	2004      	movs	r0, #4
 8000818:	f002 ff36 	bl	8003688 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	4611      	mov	r1, r2
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f002 fedc 	bl	80035e0 <HAL_NVIC_SetPriority>
}
 8000828:	b015      	add	sp, #84	; 0x54
 800082a:	f85d fb04 	ldr.w	pc, [sp], #4
 800082e:	bf00      	nop
 8000830:	10624dd3 	.word	0x10624dd3

08000834 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 8000834:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f002 ff51 	bl	80036dc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f7ff ffb5 	bl	80007a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f7ff fedb 	bl	80005f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000842:	f7ff fe31 	bl	80004a8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000846:	f7ff ff7b 	bl	8000740 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, SERVO_PULSE_OUT_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <main+0x28>)
 8000850:	f002 feae 	bl	80035b0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <main+0x2c>)
 8000856:	f001 fa87 	bl	8001d68 <HAL_TIM_Base_Start_IT>
 800085a:	e7fe      	b.n	800085a <main+0x26>
 800085c:	40011000 	.word	0x40011000
 8000860:	20002120 	.word	0x20002120

08000864 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8000864:	b510      	push	{r4, lr}
 8000866:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8000868:	2202      	movs	r2, #2
 800086a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800086e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8000870:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8000872:	460a      	mov	r2, r1
 8000874:	2100      	movs	r1, #0
 8000876:	f7ff fdb7 	bl	80003e8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800087a:	2000      	movs	r0, #0
 800087c:	bd10      	pop	{r4, pc}
 800087e:	bf00      	nop

08000880 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8000880:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8000882:	4613      	mov	r3, r2
 8000884:	460a      	mov	r2, r1
 8000886:	2100      	movs	r1, #0
 8000888:	f7ff fdae 	bl	80003e8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800088c:	2000      	movs	r0, #0
 800088e:	bd08      	pop	{r3, pc}

08000890 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8000890:	b510      	push	{r4, lr}
 8000892:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8000894:	2203      	movs	r2, #3
 8000896:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800089a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800089e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80008a2:	460a      	mov	r2, r1
 80008a4:	2100      	movs	r1, #0
 80008a6:	f7ff fda7 	bl	80003f8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80008aa:	2000      	movs	r0, #0
 80008ac:	bd10      	pop	{r4, pc}
 80008ae:	bf00      	nop

080008b0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80008b0:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80008b2:	4613      	mov	r3, r2
 80008b4:	460a      	mov	r2, r1
 80008b6:	2100      	movs	r1, #0
 80008b8:	f7ff fd9e 	bl	80003f8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80008bc:	2000      	movs	r0, #0
 80008be:	bd08      	pop	{r3, pc}

080008c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80008c0:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80008c2:	2304      	movs	r3, #4
 80008c4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80008c8:	2300      	movs	r3, #0
 80008ca:	461a      	mov	r2, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	f7ff fd8b 	bl	80003e8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80008d2:	2000      	movs	r0, #0
 80008d4:	bd08      	pop	{r3, pc}
 80008d6:	bf00      	nop

080008d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80008d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80008da:	2305      	movs	r3, #5
 80008dc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80008e0:	2300      	movs	r3, #0
 80008e2:	461a      	mov	r2, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	f7ff fd87 	bl	80003f8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80008ea:	2000      	movs	r0, #0
 80008ec:	bd08      	pop	{r3, pc}
 80008ee:	bf00      	nop

080008f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80008f0:	4603      	mov	r3, r0
    uint8_t  len = 0;
 80008f2:	2000      	movs	r0, #0

    while (*buf != '\0') 
 80008f4:	e002      	b.n	80008fc <USBD_GetLen+0xc>
    {
        len++;
 80008f6:	3001      	adds	r0, #1
 80008f8:	b2c0      	uxtb	r0, r0
        buf++;
 80008fa:	3301      	adds	r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d1f9      	bne.n	80008f6 <USBD_GetLen+0x6>
        len++;
        buf++;
    }

    return len;
}
 8000902:	4770      	bx	lr

08000904 <USBD_SetFeature>:
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8000904:	884b      	ldrh	r3, [r1, #2]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10b      	bne.n	8000922 <USBD_SetFeature+0x1e>
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800090a:	b510      	push	{r4, lr}
 800090c:	4604      	mov	r4, r0

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
  {
    pdev->dev_remote_wakeup = 1;  
 800090e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8000912:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff ffd0 	bl	80008c0 <USBD_CtlSendStatus>
 8000920:	bd10      	pop	{r4, pc}
 8000922:	4770      	bx	lr

08000924 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8000924:	780b      	ldrb	r3, [r1, #0]
 8000926:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8000928:	784b      	ldrb	r3, [r1, #1]
 800092a:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800092c:	788b      	ldrb	r3, [r1, #2]
 800092e:	78ca      	ldrb	r2, [r1, #3]
 8000930:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000934:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8000936:	790b      	ldrb	r3, [r1, #4]
 8000938:	794a      	ldrb	r2, [r1, #5]
 800093a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800093e:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8000940:	798b      	ldrb	r3, [r1, #6]
 8000942:	79ca      	ldrb	r2, [r1, #7]
 8000944:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000948:	80c3      	strh	r3, [r0, #6]
 800094a:	4770      	bx	lr

0800094c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800094c:	b510      	push	{r4, lr}
 800094e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	f7ff fd1d 	bl	8000390 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8000956:	2100      	movs	r1, #0
 8000958:	4620      	mov	r0, r4
 800095a:	f7ff fd19 	bl	8000390 <USBD_LL_StallEP>
 800095e:	bd10      	pop	{r4, pc}

08000960 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8000960:	b530      	push	{r4, r5, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	4604      	mov	r4, r0
 8000966:	460d      	mov	r5, r1
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8000968:	884a      	ldrh	r2, [r1, #2]
 800096a:	0a13      	lsrs	r3, r2, #8
 800096c:	3b01      	subs	r3, #1
 800096e:	2b06      	cmp	r3, #6
 8000970:	d879      	bhi.n	8000a66 <USBD_GetDescriptor+0x106>
 8000972:	e8df f003 	tbb	[pc, r3]
 8000976:	0c04      	.short	0x0c04
 8000978:	5c787820 	.word	0x5c787820
 800097c:	69          	.byte	0x69
 800097d:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800097e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f10d 0106 	add.w	r1, sp, #6
 8000988:	7c00      	ldrb	r0, [r0, #16]
 800098a:	4798      	blx	r3
    break;
 800098c:	e06f      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800098e:	7c03      	ldrb	r3, [r0, #16]
 8000990:	b943      	cbnz	r3, 80009a4 <USBD_GetDescriptor+0x44>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8000992:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000998:	f10d 0006 	add.w	r0, sp, #6
 800099c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800099e:	2302      	movs	r3, #2
 80009a0:	7043      	strb	r3, [r0, #1]
 80009a2:	e064      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80009a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	f10d 0006 	add.w	r0, sp, #6
 80009ae:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80009b0:	2302      	movs	r3, #2
 80009b2:	7043      	strb	r3, [r0, #1]
 80009b4:	e05b      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	2a05      	cmp	r2, #5
 80009ba:	d834      	bhi.n	8000a26 <USBD_GetDescriptor+0xc6>
 80009bc:	e8df f002 	tbb	[pc, r2]
 80009c0:	1b130b03 	.word	0x1b130b03
 80009c4:	2b23      	.short	0x2b23
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80009c6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f10d 0106 	add.w	r1, sp, #6
 80009d0:	7c00      	ldrb	r0, [r0, #16]
 80009d2:	4798      	blx	r3
      break;
 80009d4:	e04b      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80009d6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f10d 0106 	add.w	r1, sp, #6
 80009e0:	7c00      	ldrb	r0, [r0, #16]
 80009e2:	4798      	blx	r3
      break;
 80009e4:	e043      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80009e6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	f10d 0106 	add.w	r1, sp, #6
 80009f0:	7c00      	ldrb	r0, [r0, #16]
 80009f2:	4798      	blx	r3
      break;
 80009f4:	e03b      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80009f6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	f10d 0106 	add.w	r1, sp, #6
 8000a00:	7c00      	ldrb	r0, [r0, #16]
 8000a02:	4798      	blx	r3
      break;
 8000a04:	e033      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8000a06:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	f10d 0106 	add.w	r1, sp, #6
 8000a10:	7c00      	ldrb	r0, [r0, #16]
 8000a12:	4798      	blx	r3
      break;
 8000a14:	e02b      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8000a16:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f10d 0106 	add.w	r1, sp, #6
 8000a20:	7c00      	ldrb	r0, [r0, #16]
 8000a22:	4798      	blx	r3
      break;
 8000a24:	e023      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8000a26:	4629      	mov	r1, r5
 8000a28:	f7ff ff90 	bl	800094c <USBD_CtlError>
      return;
 8000a2c:	e02d      	b.n	8000a8a <USBD_GetDescriptor+0x12a>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8000a2e:	7c03      	ldrb	r3, [r0, #16]
 8000a30:	b933      	cbnz	r3, 8000a40 <USBD_GetDescriptor+0xe0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8000a32:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a38:	f10d 0006 	add.w	r0, sp, #6
 8000a3c:	4798      	blx	r3
      break;
 8000a3e:	e016      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8000a40:	4629      	mov	r1, r5
 8000a42:	f7ff ff83 	bl	800094c <USBD_CtlError>
      return;
 8000a46:	e020      	b.n	8000a8a <USBD_GetDescriptor+0x12a>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8000a48:	7c03      	ldrb	r3, [r0, #16]
 8000a4a:	b943      	cbnz	r3, 8000a5e <USBD_GetDescriptor+0xfe>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8000a4c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f10d 0006 	add.w	r0, sp, #6
 8000a56:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	7043      	strb	r3, [r0, #1]
      break; 
 8000a5c:	e007      	b.n	8000a6e <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8000a5e:	4629      	mov	r1, r5
 8000a60:	f7ff ff74 	bl	800094c <USBD_CtlError>
      return;
 8000a64:	e011      	b.n	8000a8a <USBD_GetDescriptor+0x12a>
    }

  default: 
     USBD_CtlError(pdev , req);
 8000a66:	4629      	mov	r1, r5
 8000a68:	f7ff ff70 	bl	800094c <USBD_CtlError>
    return;
 8000a6c:	e00d      	b.n	8000a8a <USBD_GetDescriptor+0x12a>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8000a6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a72:	b153      	cbz	r3, 8000a8a <USBD_GetDescriptor+0x12a>
 8000a74:	88ea      	ldrh	r2, [r5, #6]
 8000a76:	b142      	cbz	r2, 8000a8a <USBD_GetDescriptor+0x12a>
  {
    
    len = MIN(len , req->wLength);
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	bf28      	it	cs
 8000a7c:	461a      	movcs	r2, r3
 8000a7e:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 8000a82:	4601      	mov	r1, r0
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff feed 	bl	8000864 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8000a8a:	b003      	add	sp, #12
 8000a8c:	bd30      	pop	{r4, r5, pc}
 8000a8e:	bf00      	nop

08000a90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	4604      	mov	r4, r0
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8000a94:	888b      	ldrh	r3, [r1, #4]
 8000a96:	b9e3      	cbnz	r3, 8000ad2 <USBD_SetAddress+0x42>
 8000a98:	88cb      	ldrh	r3, [r1, #6]
 8000a9a:	b9d3      	cbnz	r3, 8000ad2 <USBD_SetAddress+0x42>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8000a9c:	788d      	ldrb	r5, [r1, #2]
 8000a9e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8000aa2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d102      	bne.n	8000ab0 <USBD_SetAddress+0x20>
    {
      USBD_CtlError(pdev , req);
 8000aaa:	f7ff ff4f 	bl	800094c <USBD_CtlError>
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8000ab0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8000ab4:	4629      	mov	r1, r5
 8000ab6:	f7ff fc8f 	bl	80003d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff ff00 	bl	80008c0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8000ac0:	b11d      	cbz	r5, 8000aca <USBD_SetAddress+0x3a>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8000ac8:	bd38      	pop	{r3, r4, r5, pc}
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8000aca:	2301      	movs	r3, #1
 8000acc:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f7ff ff3a 	bl	800094c <USBD_CtlError>
 8000ad8:	bd38      	pop	{r3, r4, r5, pc}
 8000ada:	bf00      	nop

08000adc <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4604      	mov	r4, r0
 8000ae0:	460d      	mov	r5, r1
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8000ae2:	7889      	ldrb	r1, [r1, #2]
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <USBD_SetConfig+0xa4>)
 8000ae6:	7019      	strb	r1, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8000ae8:	2901      	cmp	r1, #1
 8000aea:	d903      	bls.n	8000af4 <USBD_SetConfig+0x18>
  {            
     USBD_CtlError(pdev , req);                              
 8000aec:	4629      	mov	r1, r5
 8000aee:	f7ff ff2d 	bl	800094c <USBD_CtlError>
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
  } 
  else 
  {
    switch (pdev->dev_state) 
 8000af4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d002      	beq.n	8000b02 <USBD_SetConfig+0x26>
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d015      	beq.n	8000b2c <USBD_SetConfig+0x50>
 8000b00:	e039      	b.n	8000b76 <USBD_SetConfig+0x9a>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8000b02:	b181      	cbz	r1, 8000b26 <USBD_SetConfig+0x4a>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8000b04:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8000b06:	2303      	movs	r3, #3
 8000b08:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8000b0c:	f000 f998 	bl	8000e40 <USBD_SetClassConfig>
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d104      	bne.n	8000b1e <USBD_SetConfig+0x42>
        {
          USBD_CtlError(pdev , req);  
 8000b14:	4629      	mov	r1, r5
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff ff18 	bl	800094c <USBD_CtlError>
          return;
 8000b1c:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f7ff fece 	bl	80008c0 <USBD_CtlSendStatus>
 8000b24:	bd38      	pop	{r3, r4, r5, pc}
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8000b26:	f7ff fecb 	bl	80008c0 <USBD_CtlSendStatus>
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8000b2c:	b949      	cbnz	r1, 8000b42 <USBD_SetConfig+0x66>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8000b34:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8000b36:	f000 f991 	bl	8000e5c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff fec0 	bl	80008c0 <USBD_CtlSendStatus>
 8000b40:	bd38      	pop	{r3, r4, r5, pc}
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8000b42:	6843      	ldr	r3, [r0, #4]
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d013      	beq.n	8000b70 <USBD_SetConfig+0x94>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8000b48:	b2d9      	uxtb	r1, r3
 8000b4a:	f000 f987 	bl	8000e5c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <USBD_SetConfig+0xa4>)
 8000b50:	7819      	ldrb	r1, [r3, #0]
 8000b52:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8000b54:	4620      	mov	r0, r4
 8000b56:	f000 f973 	bl	8000e40 <USBD_SetClassConfig>
 8000b5a:	2802      	cmp	r0, #2
 8000b5c:	d104      	bne.n	8000b68 <USBD_SetConfig+0x8c>
        {
          USBD_CtlError(pdev , req);  
 8000b5e:	4629      	mov	r1, r5
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff fef3 	bl	800094c <USBD_CtlError>
          return;
 8000b66:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff fea9 	bl	80008c0 <USBD_CtlSendStatus>
 8000b6e:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8000b70:	f7ff fea6 	bl	80008c0 <USBD_CtlSendStatus>
 8000b74:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;
      
    default:					
       USBD_CtlError(pdev , req);                     
 8000b76:	4629      	mov	r1, r5
 8000b78:	f7ff fee8 	bl	800094c <USBD_CtlError>
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
 8000b7e:	bf00      	nop
 8000b80:	200018a4 	.word	0x200018a4

08000b84 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8000b84:	b508      	push	{r3, lr}

  if (req->wLength != 1) 
 8000b86:	88cb      	ldrh	r3, [r1, #6]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d002      	beq.n	8000b92 <USBD_GetConfig+0xe>
  {                   
     USBD_CtlError(pdev , req);
 8000b8c:	f7ff fede 	bl	800094c <USBD_CtlError>
 8000b90:	bd08      	pop	{r3, pc}
  }
  else 
  {
    switch (pdev->dev_state )  
 8000b92:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d002      	beq.n	8000ba0 <USBD_GetConfig+0x1c>
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d008      	beq.n	8000bb0 <USBD_GetConfig+0x2c>
 8000b9e:	e00c      	b.n	8000bba <USBD_GetConfig+0x36>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f7ff fe5b 	bl	8000864 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 8000bae:	bd08      	pop	{r3, pc}
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	1d01      	adds	r1, r0, #4
 8000bb4:	f7ff fe56 	bl	8000864 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8000bb8:	bd08      	pop	{r3, pc}
      
    default:
       USBD_CtlError(pdev , req);
 8000bba:	f7ff fec7 	bl	800094c <USBD_CtlError>
 8000bbe:	bd08      	pop	{r3, pc}

08000bc0 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8000bc0:	b508      	push	{r3, lr}
  
    
  switch (pdev->dev_state) 
 8000bc2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000bc6:	3b02      	subs	r3, #2
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d80c      	bhi.n	8000be6 <USBD_GetStatus+0x26>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8000bcc:	2301      	movs	r3, #1
 8000bce:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8000bd0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000bd4:	b10b      	cbz	r3, 8000bda <USBD_GetStatus+0x1a>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8000bda:	2202      	movs	r2, #2
 8000bdc:	f100 010c 	add.w	r1, r0, #12
 8000be0:	f7ff fe40 	bl	8000864 <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 8000be4:	bd08      	pop	{r3, pc}
    
  default :
    USBD_CtlError(pdev , req);                        
 8000be6:	f7ff feb1 	bl	800094c <USBD_CtlError>
 8000bea:	bd08      	pop	{r3, pc}

08000bec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8000bec:	b510      	push	{r4, lr}
 8000bee:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8000bf0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000bf4:	3b02      	subs	r3, #2
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d80d      	bhi.n	8000c16 <USBD_ClrFeature+0x2a>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8000bfa:	884b      	ldrh	r3, [r1, #2]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10c      	bne.n	8000c1a <USBD_ClrFeature+0x2e>
    {
      pdev->dev_remote_wakeup = 0; 
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8000c06:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f7ff fe56 	bl	80008c0 <USBD_CtlSendStatus>
 8000c14:	bd10      	pop	{r4, pc}
    }
    break;
    
  default :
     USBD_CtlError(pdev , req);
 8000c16:	f7ff fe99 	bl	800094c <USBD_CtlError>
 8000c1a:	bd10      	pop	{r4, pc}

08000c1c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8000c1c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8000c1e:	784b      	ldrb	r3, [r1, #1]
 8000c20:	2b09      	cmp	r3, #9
 8000c22:	d81b      	bhi.n	8000c5c <USBD_StdDevReq+0x40>
 8000c24:	e8df f003 	tbb	[pc, r3]
 8000c28:	141a1711 	.word	0x141a1711
 8000c2c:	1a05081a 	.word	0x1a05081a
 8000c30:	0b0e      	.short	0x0b0e
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8000c32:	f7ff fe95 	bl	8000960 <USBD_GetDescriptor>
    break;
 8000c36:	e013      	b.n	8000c60 <USBD_StdDevReq+0x44>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8000c38:	f7ff ff2a 	bl	8000a90 <USBD_SetAddress>
    break;
 8000c3c:	e010      	b.n	8000c60 <USBD_StdDevReq+0x44>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8000c3e:	f7ff ff4d 	bl	8000adc <USBD_SetConfig>
    break;
 8000c42:	e00d      	b.n	8000c60 <USBD_StdDevReq+0x44>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8000c44:	f7ff ff9e 	bl	8000b84 <USBD_GetConfig>
    break;
 8000c48:	e00a      	b.n	8000c60 <USBD_StdDevReq+0x44>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8000c4a:	f7ff ffb9 	bl	8000bc0 <USBD_GetStatus>
    break;
 8000c4e:	e007      	b.n	8000c60 <USBD_StdDevReq+0x44>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8000c50:	f7ff fe58 	bl	8000904 <USBD_SetFeature>
    break;
 8000c54:	e004      	b.n	8000c60 <USBD_StdDevReq+0x44>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8000c56:	f7ff ffc9 	bl	8000bec <USBD_ClrFeature>
    break;
 8000c5a:	e001      	b.n	8000c60 <USBD_StdDevReq+0x44>
    
  default:  
    USBD_CtlError(pdev , req);
 8000c5c:	f7ff fe76 	bl	800094c <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd08      	pop	{r3, pc}

08000c64 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8000c64:	b538      	push	{r3, r4, r5, lr}
 8000c66:	4604      	mov	r4, r0
 8000c68:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8000c6a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d10f      	bne.n	8000c92 <USBD_StdItfReq+0x2e>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8000c72:	790b      	ldrb	r3, [r1, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d809      	bhi.n	8000c8c <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8000c78:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8000c80:	88eb      	ldrh	r3, [r5, #6]
 8000c82:	b943      	cbnz	r3, 8000c96 <USBD_StdItfReq+0x32>
      {
         USBD_CtlSendStatus(pdev);
 8000c84:	4620      	mov	r0, r4
 8000c86:	f7ff fe1b 	bl	80008c0 <USBD_CtlSendStatus>
 8000c8a:	e004      	b.n	8000c96 <USBD_StdItfReq+0x32>
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8000c8c:	f7ff fe5e 	bl	800094c <USBD_CtlError>
 8000c90:	e001      	b.n	8000c96 <USBD_StdItfReq+0x32>
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8000c92:	f7ff fe5b 	bl	800094c <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8000c96:	2000      	movs	r0, #0
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4605      	mov	r5, r0
 8000ca0:	460c      	mov	r4, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8000ca2:	888a      	ldrh	r2, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8000ca4:	780b      	ldrb	r3, [r1, #0]
 8000ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000caa:	2b20      	cmp	r3, #32
 8000cac:	d104      	bne.n	8000cb8 <USBD_StdEPReq+0x1c>
  {
    pdev->pClass->Setup (pdev, req);
 8000cae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	4798      	blx	r3
    
    return USBD_OK;
 8000cb6:	e07d      	b.n	8000db4 <USBD_StdEPReq+0x118>
 8000cb8:	b2d1      	uxtb	r1, r2
  }
  
  switch (req->bRequest) 
 8000cba:	7863      	ldrb	r3, [r4, #1]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d026      	beq.n	8000d0e <USBD_StdEPReq+0x72>
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d048      	beq.n	8000d56 <USBD_StdEPReq+0xba>
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d175      	bne.n	8000db4 <USBD_StdEPReq+0x118>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8000cc8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d002      	beq.n	8000cd6 <USBD_StdEPReq+0x3a>
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d007      	beq.n	8000ce4 <USBD_StdEPReq+0x48>
 8000cd4:	e017      	b.n	8000d06 <USBD_StdEPReq+0x6a>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d06c      	beq.n	8000db4 <USBD_StdEPReq+0x118>
 8000cda:	2980      	cmp	r1, #128	; 0x80
 8000cdc:	d06a      	beq.n	8000db4 <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8000cde:	f7ff fb57 	bl	8000390 <USBD_LL_StallEP>
 8000ce2:	e067      	b.n	8000db4 <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8000ce4:	8863      	ldrh	r3, [r4, #2]
 8000ce6:	b923      	cbnz	r3, 8000cf2 <USBD_StdEPReq+0x56>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8000ce8:	b119      	cbz	r1, 8000cf2 <USBD_StdEPReq+0x56>
 8000cea:	2980      	cmp	r1, #128	; 0x80
 8000cec:	d001      	beq.n	8000cf2 <USBD_StdEPReq+0x56>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8000cee:	f7ff fb4f 	bl	8000390 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 8000cf2:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f7ff fdde 	bl	80008c0 <USBD_CtlSendStatus>
      
      break;
 8000d04:	e056      	b.n	8000db4 <USBD_StdEPReq+0x118>
      
    default:                         
      USBD_CtlError(pdev , req);
 8000d06:	4621      	mov	r1, r4
 8000d08:	f7ff fe20 	bl	800094c <USBD_CtlError>
      break;    
 8000d0c:	e052      	b.n	8000db4 <USBD_StdEPReq+0x118>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8000d0e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d002      	beq.n	8000d1c <USBD_StdEPReq+0x80>
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d007      	beq.n	8000d2a <USBD_StdEPReq+0x8e>
 8000d1a:	e018      	b.n	8000d4e <USBD_StdEPReq+0xb2>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	d049      	beq.n	8000db4 <USBD_StdEPReq+0x118>
 8000d20:	2980      	cmp	r1, #128	; 0x80
 8000d22:	d047      	beq.n	8000db4 <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8000d24:	f7ff fb34 	bl	8000390 <USBD_LL_StallEP>
 8000d28:	e044      	b.n	8000db4 <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8000d2a:	8863      	ldrh	r3, [r4, #2]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d141      	bne.n	8000db4 <USBD_StdEPReq+0x118>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8000d30:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8000d34:	d007      	beq.n	8000d46 <USBD_StdEPReq+0xaa>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8000d36:	f7ff fb33 	bl	80003a0 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8000d3a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4621      	mov	r1, r4
 8000d42:	4628      	mov	r0, r5
 8000d44:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8000d46:	4628      	mov	r0, r5
 8000d48:	f7ff fdba 	bl	80008c0 <USBD_CtlSendStatus>
 8000d4c:	e032      	b.n	8000db4 <USBD_StdEPReq+0x118>
      }
      break;
      
    default:                         
      USBD_CtlError(pdev , req);
 8000d4e:	4621      	mov	r1, r4
 8000d50:	f7ff fdfc 	bl	800094c <USBD_CtlError>
      break;    
 8000d54:	e02e      	b.n	8000db4 <USBD_StdEPReq+0x118>
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8000d56:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d002      	beq.n	8000d64 <USBD_StdEPReq+0xc8>
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d006      	beq.n	8000d70 <USBD_StdEPReq+0xd4>
 8000d62:	e024      	b.n	8000dae <USBD_StdEPReq+0x112>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8000d64:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8000d68:	d024      	beq.n	8000db4 <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8000d6a:	f7ff fb11 	bl	8000390 <USBD_LL_StallEP>
 8000d6e:	e021      	b.n	8000db4 <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8000d70:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000d74:	d006      	beq.n	8000d84 <USBD_StdEPReq+0xe8>
 8000d76:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8000d7a:	3401      	adds	r4, #1
 8000d7c:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8000d80:	3404      	adds	r4, #4
 8000d82:	e005      	b.n	8000d90 <USBD_StdEPReq+0xf4>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8000d84:	f001 047f 	and.w	r4, r1, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8000d88:	3410      	adds	r4, #16
 8000d8a:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8000d8e:	3404      	adds	r4, #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8000d90:	4628      	mov	r0, r5
 8000d92:	f7ff fb0d 	bl	80003b0 <USBD_LL_IsStallEP>
 8000d96:	b110      	cbz	r0, 8000d9e <USBD_StdEPReq+0x102>
      {
        pep->status = 0x0001;     
 8000d98:	2301      	movs	r3, #1
 8000d9a:	6023      	str	r3, [r4, #0]
 8000d9c:	e001      	b.n	8000da2 <USBD_StdEPReq+0x106>
      }
      else
      {
        pep->status = 0x0000;  
 8000d9e:	2300      	movs	r3, #0
 8000da0:	6023      	str	r3, [r4, #0]
      }
      
      USBD_CtlSendData (pdev,
 8000da2:	2202      	movs	r2, #2
 8000da4:	4621      	mov	r1, r4
 8000da6:	4628      	mov	r0, r5
 8000da8:	f7ff fd5c 	bl	8000864 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8000dac:	e002      	b.n	8000db4 <USBD_StdEPReq+0x118>
      
    default:                         
      USBD_CtlError(pdev , req);
 8000dae:	4621      	mov	r1, r4
 8000db0:	f7ff fdcc 	bl	800094c <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8000db4:	2000      	movs	r0, #0
 8000db6:	bd38      	pop	{r3, r4, r5, pc}

08000db8 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8000db8:	b1d0      	cbz	r0, 8000df0 <USBD_GetString+0x38>
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8000dba:	b570      	push	{r4, r5, r6, lr}
 8000dbc:	460d      	mov	r5, r1
 8000dbe:	4616      	mov	r6, r2
 8000dc0:	4604      	mov	r4, r0
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8000dc2:	f7ff fd95 	bl	80008f0 <USBD_GetLen>
 8000dc6:	3001      	adds	r0, #1
 8000dc8:	0040      	lsls	r0, r0, #1
 8000dca:	b280      	uxth	r0, r0
 8000dcc:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 8000dce:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	706b      	strb	r3, [r5, #1]
 8000dd4:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8000dd6:	e007      	b.n	8000de8 <USBD_GetString+0x30>
    {
      unicode[idx++] = *desc++;
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	3401      	adds	r4, #1
 8000dde:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8000de0:	3302      	adds	r3, #2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	54a9      	strb	r1, [r5, r2]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8000de8:	7821      	ldrb	r1, [r4, #0]
 8000dea:	2900      	cmp	r1, #0
 8000dec:	d1f4      	bne.n	8000dd8 <USBD_GetString+0x20>
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8000df4:	b198      	cbz	r0, 8000e1e <USBD_Init+0x2a>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8000df6:	b508      	push	{r3, lr}
 8000df8:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8000dfa:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8000dfe:	b110      	cbz	r0, 8000e06 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8000e00:	2000      	movs	r0, #0
 8000e02:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8000e06:	b109      	cbz	r1, 8000e0c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8000e08:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8000e0c:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8000e14:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8000e16:	f7ff fa5f 	bl	80002d8 <USBD_LL_Init>
  
  return USBD_OK; 
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8000e1e:	2002      	movs	r0, #2
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8000e24:	b119      	cbz	r1, 8000e2e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8000e26:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8000e2e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8000e34:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8000e36:	f7ff fa91 	bl	800035c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	bd08      	pop	{r3, pc}
 8000e3e:	bf00      	nop

08000e40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000e40:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8000e42:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000e46:	b123      	cbz	r3, 8000e52 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4798      	blx	r3
 8000e4c:	b118      	cbz	r0, 8000e56 <USBD_SetClassConfig+0x16>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8000e4e:	2002      	movs	r0, #2
 8000e50:	bd08      	pop	{r3, pc}
 8000e52:	2002      	movs	r0, #2
 8000e54:	bd08      	pop	{r3, pc}
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
    {
      ret = USBD_OK;
 8000e56:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8000e58:	bd08      	pop	{r3, pc}
 8000e5a:	bf00      	nop

08000e5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000e5c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8000e5e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4798      	blx	r3
  return USBD_OK;
}
 8000e66:	2000      	movs	r0, #0
 8000e68:	bd08      	pop	{r3, pc}
 8000e6a:	bf00      	nop

08000e6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000e70:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8000e74:	4628      	mov	r0, r5
 8000e76:	f7ff fd55 	bl	8000924 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8000e80:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8000e84:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8000e88:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8000e8c:	f001 031f 	and.w	r3, r1, #31
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d008      	beq.n	8000ea6 <USBD_LL_SetupStage+0x3a>
 8000e94:	b113      	cbz	r3, 8000e9c <USBD_LL_SetupStage+0x30>
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d00a      	beq.n	8000eb0 <USBD_LL_SetupStage+0x44>
 8000e9a:	e00e      	b.n	8000eba <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8000e9c:	4629      	mov	r1, r5
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff febc 	bl	8000c1c <USBD_StdDevReq>
    break;
 8000ea4:	e00e      	b.n	8000ec4 <USBD_LL_SetupStage+0x58>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f7ff fedb 	bl	8000c64 <USBD_StdItfReq>
    break;
 8000eae:	e009      	b.n	8000ec4 <USBD_LL_SetupStage+0x58>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fef2 	bl	8000c9c <USBD_StdEPReq>
    break;
 8000eb8:	e004      	b.n	8000ec4 <USBD_LL_SetupStage+0x58>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8000eba:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f7ff fa66 	bl	8000390 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}

08000ec8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8000ecc:	bb11      	cbnz	r1, 8000f14 <USBD_LL_DataOutStage+0x4c>
 8000ece:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000ed0:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8000ed4:	2a03      	cmp	r2, #3
 8000ed6:	d128      	bne.n	8000f2a <USBD_LL_DataOutStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 8000ed8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8000edc:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8000ee0:	4291      	cmp	r1, r2
 8000ee2:	d90a      	bls.n	8000efa <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8000ee4:	1a89      	subs	r1, r1, r2
 8000ee6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8000eea:	428a      	cmp	r2, r1
 8000eec:	bf28      	it	cs
 8000eee:	460a      	movcs	r2, r1
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fcdc 	bl	80008b0 <USBD_CtlContinueRx>
 8000ef8:	e017      	b.n	8000f2a <USBD_LL_DataOutStage+0x62>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000efa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	b123      	cbz	r3, 8000f0c <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000f02:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000f06:	2a03      	cmp	r2, #3
 8000f08:	d100      	bne.n	8000f0c <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8000f0a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff fcd7 	bl	80008c0 <USBD_CtlSendStatus>
 8000f12:	e00a      	b.n	8000f2a <USBD_LL_DataOutStage+0x62>
 8000f14:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8000f16:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	b12b      	cbz	r3, 8000f2a <USBD_LL_DataOutStage+0x62>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000f1e:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8000f22:	2903      	cmp	r1, #3
 8000f24:	d101      	bne.n	8000f2a <USBD_LL_DataOutStage+0x62>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8000f26:	4611      	mov	r1, r2
 8000f28:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	bf00      	nop

08000f30 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8000f34:	2900      	cmp	r1, #0
 8000f36:	d143      	bne.n	8000fc0 <USBD_LL_DataInStage+0x90>
 8000f38:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8000f3a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8000f3e:	2a02      	cmp	r2, #2
 8000f40:	d136      	bne.n	8000fb0 <USBD_LL_DataInStage+0x80>
    {
      if(pep->rem_length > pep->maxpacket)
 8000f42:	69c1      	ldr	r1, [r0, #28]
 8000f44:	6a02      	ldr	r2, [r0, #32]
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d90c      	bls.n	8000f64 <USBD_LL_DataInStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8000f4a:	1a8a      	subs	r2, r1, r2
 8000f4c:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fc95 	bl	8000880 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000f56:	2300      	movs	r3, #0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f7ff fa4b 	bl	80003f8 <USBD_LL_PrepareReceive>
 8000f62:	e025      	b.n	8000fb0 <USBD_LL_DataInStage+0x80>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8000f64:	6981      	ldr	r1, [r0, #24]
 8000f66:	fbb1 f3f2 	udiv	r3, r1, r2
 8000f6a:	fb02 1313 	mls	r3, r2, r3, r1
 8000f6e:	b993      	cbnz	r3, 8000f96 <USBD_LL_DataInStage+0x66>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	d810      	bhi.n	8000f96 <USBD_LL_DataInStage+0x66>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8000f74:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d20c      	bcs.n	8000f96 <USBD_LL_DataInStage+0x66>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4611      	mov	r1, r2
 8000f80:	f7ff fc7e 	bl	8000880 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8000f84:	2100      	movs	r1, #0
 8000f86:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f7ff fa32 	bl	80003f8 <USBD_LL_PrepareReceive>
 8000f94:	e00c      	b.n	8000fb0 <USBD_LL_DataInStage+0x80>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8000f96:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	b12b      	cbz	r3, 8000faa <USBD_LL_DataInStage+0x7a>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000f9e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8000fa2:	2a03      	cmp	r2, #3
 8000fa4:	d101      	bne.n	8000faa <USBD_LL_DataInStage+0x7a>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff fc94 	bl	80008d8 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8000fb0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10e      	bne.n	8000fd6 <USBD_LL_DataInStage+0xa6>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8000fbe:	e00a      	b.n	8000fd6 <USBD_LL_DataInStage+0xa6>
 8000fc0:	460a      	mov	r2, r1
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8000fc2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	b12b      	cbz	r3, 8000fd6 <USBD_LL_DataInStage+0xa6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000fca:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8000fce:	2903      	cmp	r1, #3
 8000fd0:	d101      	bne.n	8000fd6 <USBD_LL_DataInStage+0xa6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	bf00      	nop

08000fdc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	f7ff f9c1 	bl	800036c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000fea:	2540      	movs	r5, #64	; 0x40
 8000fec:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f7ff f9b8 	bl	800036c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8000ffc:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8001004:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001008:	b12b      	cbz	r3, 8001016 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800100a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	7921      	ldrb	r1, [r4, #4]
 8001012:	4620      	mov	r0, r4
 8001014:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8001016:	2000      	movs	r0, #0
 8001018:	bd38      	pop	{r3, r4, r5, pc}
 800101a:	bf00      	nop

0800101c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800101c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800101e:	2000      	movs	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001024:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8001028:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800102c:	2304      	movs	r3, #4
 800102e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8001032:	2000      	movs	r0, #0
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8001038:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800103c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8001040:	2000      	movs	r0, #0
 8001042:	4770      	bx	lr

08001044 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8001044:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8001046:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800104a:	2b03      	cmp	r3, #3
 800104c:	d104      	bne.n	8001058 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800104e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	b103      	cbz	r3, 8001058 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8001056:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8001058:	2000      	movs	r0, #0
 800105a:	bd08      	pop	{r3, pc}

0800105c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800105c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001060:	b11b      	cbz	r3, 800106a <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001062:	2000      	movs	r0, #0
 8001064:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001068:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800106a:	2002      	movs	r0, #2
  }
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8001070:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001072:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001076:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800107a:	b15b      	cbz	r3, 8001094 <USBD_CDC_EP0_RxReady+0x24>
 800107c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001080:	28ff      	cmp	r0, #255	; 0xff
 8001082:	d007      	beq.n	8001094 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800108a:	4621      	mov	r1, r4
 800108c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800108e:	23ff      	movs	r3, #255	; 0xff
 8001090:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001094:	2000      	movs	r0, #0
 8001096:	bd10      	pop	{r4, pc}

08001098 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001098:	2343      	movs	r3, #67	; 0x43
 800109a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800109c:	4800      	ldr	r0, [pc, #0]	; (80010a0 <USBD_CDC_GetFSCfgDesc+0x8>)
 800109e:	4770      	bx	lr
 80010a0:	20001048 	.word	0x20001048

080010a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80010a4:	2343      	movs	r3, #67	; 0x43
 80010a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80010a8:	4800      	ldr	r0, [pc, #0]	; (80010ac <USBD_CDC_GetHSCfgDesc+0x8>)
 80010aa:	4770      	bx	lr
 80010ac:	20001114 	.word	0x20001114

080010b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80010b0:	2343      	movs	r3, #67	; 0x43
 80010b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80010b4:	4800      	ldr	r0, [pc, #0]	; (80010b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80010b6:	4770      	bx	lr
 80010b8:	200010d0 	.word	0x200010d0

080010bc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80010bc:	230a      	movs	r3, #10
 80010be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80010c0:	4800      	ldr	r0, [pc, #0]	; (80010c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80010c2:	4770      	bx	lr
 80010c4:	200010c4 	.word	0x200010c4

080010c8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80010cc:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80010d0:	f7ff f99a 	bl	8000408 <USBD_LL_GetRxDataSize>
 80010d4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80010d8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80010dc:	b14b      	cbz	r3, 80010f2 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80010de:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80010e8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80010ec:	4798      	blx	r3

    return USBD_OK;
 80010ee:	2000      	movs	r0, #0
 80010f0:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80010f2:	2002      	movs	r0, #2
  }
}
 80010f4:	bd38      	pop	{r3, r4, r5, pc}
 80010f6:	bf00      	nop

080010f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	4605      	mov	r5, r0
 80010fc:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80010fe:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001102:	780b      	ldrb	r3, [r1, #0]
 8001104:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8001108:	d024      	beq.n	8001154 <USBD_CDC_Setup+0x5c>
 800110a:	2a20      	cmp	r2, #32
 800110c:	d129      	bne.n	8001162 <USBD_CDC_Setup+0x6a>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800110e:	88ca      	ldrh	r2, [r1, #6]
 8001110:	b1ca      	cbz	r2, 8001146 <USBD_CDC_Setup+0x4e>
    {
      if (req->bmRequest & 0x80)
 8001112:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001116:	d00b      	beq.n	8001130 <USBD_CDC_Setup+0x38>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001118:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4631      	mov	r1, r6
 8001120:	7860      	ldrb	r0, [r4, #1]
 8001122:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8001124:	88e2      	ldrh	r2, [r4, #6]
 8001126:	4631      	mov	r1, r6
 8001128:	4628      	mov	r0, r5
 800112a:	f7ff fb9b 	bl	8000864 <USBD_CtlSendData>
 800112e:	e018      	b.n	8001162 <USBD_CDC_Setup+0x6a>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8001130:	784b      	ldrb	r3, [r1, #1]
 8001132:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8001136:	88cb      	ldrh	r3, [r1, #6]
 8001138:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 800113c:	88ca      	ldrh	r2, [r1, #6]
 800113e:	4631      	mov	r1, r6
 8001140:	f7ff fba6 	bl	8000890 <USBD_CtlPrepareRx>
 8001144:	e00d      	b.n	8001162 <USBD_CDC_Setup+0x6a>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001146:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2200      	movs	r2, #0
 800114e:	7848      	ldrb	r0, [r1, #1]
 8001150:	4798      	blx	r3
 8001152:	e006      	b.n	8001162 <USBD_CDC_Setup+0x6a>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8001154:	784b      	ldrb	r3, [r1, #1]
 8001156:	2b0a      	cmp	r3, #10
 8001158:	d103      	bne.n	8001162 <USBD_CDC_Setup+0x6a>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 800115a:	2201      	movs	r2, #1
 800115c:	4902      	ldr	r1, [pc, #8]	; (8001168 <USBD_CDC_Setup+0x70>)
 800115e:	f7ff fb81 	bl	8000864 <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8001162:	2000      	movs	r0, #0
 8001164:	bd70      	pop	{r4, r5, r6, pc}
 8001166:	bf00      	nop
 8001168:	200018a5 	.word	0x200018a5

0800116c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800116c:	b510      	push	{r4, lr}
 800116e:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8001170:	2181      	movs	r1, #129	; 0x81
 8001172:	f7ff f905 	bl	8000380 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8001176:	2101      	movs	r1, #1
 8001178:	4620      	mov	r0, r4
 800117a:	f7ff f901 	bl	8000380 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800117e:	2182      	movs	r1, #130	; 0x82
 8001180:	4620      	mov	r0, r4
 8001182:	f7ff f8fd 	bl	8000380 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8001186:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800118a:	b153      	cbz	r3, 80011a2 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800118c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001194:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001198:	f7ff f940 	bl	800041c <USBD_static_free>
    pdev->pClassData = NULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 80011a2:	2000      	movs	r0, #0
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	bf00      	nop

080011a8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80011ac:	7c03      	ldrb	r3, [r0, #16]
 80011ae:	b96b      	cbnz	r3, 80011cc <USBD_CDC_Init+0x24>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80011b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b4:	2202      	movs	r2, #2
 80011b6:	2181      	movs	r1, #129	; 0x81
 80011b8:	f7ff f8d8 	bl	800036c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	2202      	movs	r2, #2
 80011c2:	2101      	movs	r1, #1
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff f8d1 	bl	800036c <USBD_LL_OpenEP>
 80011ca:	e00a      	b.n	80011e2 <USBD_CDC_Init+0x3a>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80011cc:	2340      	movs	r3, #64	; 0x40
 80011ce:	2202      	movs	r2, #2
 80011d0:	2181      	movs	r1, #129	; 0x81
 80011d2:	f7ff f8cb 	bl	800036c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	2202      	movs	r2, #2
 80011da:	2101      	movs	r1, #1
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff f8c5 	bl	800036c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80011e2:	2308      	movs	r3, #8
 80011e4:	2203      	movs	r2, #3
 80011e6:	2182      	movs	r1, #130	; 0x82
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff f8bf 	bl	800036c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80011ee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80011f2:	f7ff f90f 	bl	8000414 <USBD_static_malloc>
 80011f6:	4605      	mov	r5, r0
 80011f8:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80011fc:	b1e8      	cbz	r0, 800123a <USBD_CDC_Init+0x92>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80011fe:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState =0;
 800120c:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001210:	7c23      	ldrb	r3, [r4, #16]
 8001212:	b94b      	cbnz	r3, 8001228 <USBD_CDC_Init+0x80>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800121c:	2101      	movs	r1, #1
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff f8ea 	bl	80003f8 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8001224:	2000      	movs	r0, #0
 8001226:	bd38      	pop	{r3, r4, r5, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800122e:	2101      	movs	r1, #1
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff f8e1 	bl	80003f8 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8001236:	2000      	movs	r0, #0
 8001238:	bd38      	pop	{r3, r4, r5, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 800123a:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 800123c:	bd38      	pop	{r3, r4, r5, pc}
 800123e:	bf00      	nop

08001240 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8001240:	b119      	cbz	r1, 800124a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8001242:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8001246:	2000      	movs	r0, #0
 8001248:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 800124a:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001250:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
 8001254:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8001258:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 800125c:	2000      	movs	r0, #0
 800125e:	4770      	bx	lr

08001260 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001260:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->RxBuffer = pbuff;
 8001264:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8001268:	2000      	movs	r0, #0
 800126a:	4770      	bx	lr

0800126c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800126c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001270:	b17a      	cbz	r2, 8001292 <USBD_CDC_TransmitPacket+0x26>
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8001272:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0)
 8001274:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001278:	b96b      	cbnz	r3, 8001296 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8001280:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8001284:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8001288:	2181      	movs	r1, #129	; 0x81
 800128a:	f7ff f8ad 	bl	80003e8 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800128e:	2000      	movs	r0, #0
 8001290:	bd08      	pop	{r3, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8001292:	2002      	movs	r0, #2
  }
}
 8001294:	4770      	bx	lr
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8001296:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8001298:	bd08      	pop	{r3, pc}
 800129a:	bf00      	nop

0800129c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800129c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80012a0:	b19a      	cbz	r2, 80012ca <USBD_CDC_ReceivePacket+0x2e>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80012a2:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80012a4:	7c03      	ldrb	r3, [r0, #16]
 80012a6:	b943      	cbnz	r3, 80012ba <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80012b0:	2101      	movs	r1, #1
 80012b2:	f7ff f8a1 	bl	80003f8 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80012b6:	2000      	movs	r0, #0
 80012b8:	bd08      	pop	{r3, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80012ba:	2340      	movs	r3, #64	; 0x40
 80012bc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80012c0:	2101      	movs	r1, #1
 80012c2:	f7ff f899 	bl	80003f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80012c6:	2000      	movs	r0, #0
 80012c8:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 80012ca:	2002      	movs	r0, #2
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	a801      	add	r0, sp, #4
 80012d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80012d8:	2000      	movs	r0, #0
 80012da:	b004      	add	sp, #16
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80012e0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 80012ea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80012ee:	2000      	movs	r0, #0
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80012f4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80012f8:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80012fc:	045b      	lsls	r3, r3, #17
 80012fe:	0c5b      	lsrs	r3, r3, #17
 8001300:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001304:	2000      	movs	r0, #0
 8001306:	4770      	bx	lr

08001308 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001308:	2000      	movs	r0, #0
 800130a:	4770      	bx	lr

0800130c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 800130c:	b084      	sub	sp, #16
 800130e:	b410      	push	{r4}
 8001310:	ac02      	add	r4, sp, #8
 8001312:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001316:	2301      	movs	r3, #1
 8001318:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001322:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001326:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    
  return HAL_OK;
}
 800132a:	4618      	mov	r0, r3
 800132c:	bc10      	pop	{r4}
 800132e:	b004      	add	sp, #16
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001334:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 8001336:	78cb      	ldrb	r3, [r1, #3]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d835      	bhi.n	80013a8 <USB_ActivateEndpoint+0x74>
 800133c:	e8df f003 	tbb	[pc, r3]
 8001340:	1b0f2802 	.word	0x1b0f2802
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001344:	780a      	ldrb	r2, [r1, #0]
 8001346:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800134a:	b29b      	uxth	r3, r3
 800134c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001358:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 800135c:	e024      	b.n	80013a8 <USB_ActivateEndpoint+0x74>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800135e:	780a      	ldrb	r2, [r1, #0]
 8001360:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001364:	b29b      	uxth	r3, r3
 8001366:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800136a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800136e:	b29b      	uxth	r3, r3
 8001370:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8001374:	e018      	b.n	80013a8 <USB_ActivateEndpoint+0x74>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001376:	780a      	ldrb	r2, [r1, #0]
 8001378:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800137c:	b29b      	uxth	r3, r3
 800137e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001386:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800138a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 800138e:	e00b      	b.n	80013a8 <USB_ActivateEndpoint+0x74>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001390:	780a      	ldrb	r2, [r1, #0]
 8001392:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001396:	b29b      	uxth	r3, r3
 8001398:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800139c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80013a8:	780a      	ldrb	r2, [r1, #0]
 80013aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80013ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013b2:	051b      	lsls	r3, r3, #20
 80013b4:	0d1b      	lsrs	r3, r3, #20
 80013b6:	4313      	orrs	r3, r2
 80013b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80013c4:	7a8b      	ldrb	r3, [r1, #10]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 808b 	bne.w	80014e2 <USB_ActivateEndpoint+0x1ae>
  {
    if (ep->is_in)
 80013cc:	784b      	ldrb	r3, [r1, #1]
 80013ce:	b383      	cbz	r3, 8001432 <USB_ActivateEndpoint+0xfe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80013d0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	780a      	ldrb	r2, [r1, #0]
 80013d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80013e0:	888a      	ldrh	r2, [r1, #4]
 80013e2:	0852      	lsrs	r2, r2, #1
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80013ea:	780a      	ldrb	r2, [r1, #0]
 80013ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80013f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b15b      	cbz	r3, 8001410 <USB_ActivateEndpoint+0xdc>
 80013f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80013fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001400:	051b      	lsls	r3, r3, #20
 8001402:	0d1b      	lsrs	r3, r3, #20
 8001404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800140c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001410:	780a      	ldrb	r2, [r1, #0]
 8001412:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001416:	b29b      	uxth	r3, r3
 8001418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800141c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001420:	f083 0320 	eor.w	r3, r3, #32
 8001424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001430:	e11b      	b.n	800166a <USB_ActivateEndpoint+0x336>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001432:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001436:	b29b      	uxth	r3, r3
 8001438:	780a      	ldrb	r2, [r1, #0]
 800143a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800143e:	3304      	adds	r3, #4
 8001440:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001444:	888a      	ldrh	r2, [r1, #4]
 8001446:	0852      	lsrs	r2, r2, #1
 8001448:	0052      	lsls	r2, r2, #1
 800144a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800144e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001452:	b29b      	uxth	r3, r3
 8001454:	780a      	ldrb	r2, [r1, #0]
 8001456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800145a:	3306      	adds	r3, #6
 800145c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001460:	690c      	ldr	r4, [r1, #16]
 8001462:	2c3e      	cmp	r4, #62	; 0x3e
 8001464:	d90e      	bls.n	8001484 <USB_ActivateEndpoint+0x150>
 8001466:	f3c4 124f 	ubfx	r2, r4, #5, #16
 800146a:	f014 0f1f 	tst.w	r4, #31
 800146e:	d101      	bne.n	8001474 <USB_ActivateEndpoint+0x140>
 8001470:	3a01      	subs	r2, #1
 8001472:	b292      	uxth	r2, r2
 8001474:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8001478:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800147c:	b292      	uxth	r2, r2
 800147e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001482:	e00a      	b.n	800149a <USB_ActivateEndpoint+0x166>
 8001484:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8001488:	f014 0f01 	tst.w	r4, #1
 800148c:	d001      	beq.n	8001492 <USB_ActivateEndpoint+0x15e>
 800148e:	3201      	adds	r2, #1
 8001490:	b292      	uxth	r2, r2
 8001492:	0292      	lsls	r2, r2, #10
 8001494:	b292      	uxth	r2, r2
 8001496:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800149a:	780a      	ldrb	r2, [r1, #0]
 800149c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b15b      	cbz	r3, 80014c0 <USB_ActivateEndpoint+0x18c>
 80014a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b0:	051b      	lsls	r3, r3, #20
 80014b2:	0d1b      	lsrs	r3, r3, #20
 80014b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80014c0:	780a      	ldrb	r2, [r1, #0]
 80014c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014d0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80014d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80014e0:	e0c3      	b.n	800166a <USB_ActivateEndpoint+0x336>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 80014e2:	780a      	ldrb	r2, [r1, #0]
 80014e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014e8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80014ec:	051b      	lsls	r3, r3, #20
 80014ee:	0d1b      	lsrs	r3, r3, #20
 80014f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80014fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001500:	b29b      	uxth	r3, r3
 8001502:	780a      	ldrb	r2, [r1, #0]
 8001504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001508:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800150c:	88ca      	ldrh	r2, [r1, #6]
 800150e:	0852      	lsrs	r2, r2, #1
 8001510:	0052      	lsls	r2, r2, #1
 8001512:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001516:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800151a:	b29b      	uxth	r3, r3
 800151c:	780a      	ldrb	r2, [r1, #0]
 800151e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001522:	3304      	adds	r3, #4
 8001524:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001528:	890a      	ldrh	r2, [r1, #8]
 800152a:	0852      	lsrs	r2, r2, #1
 800152c:	0052      	lsls	r2, r2, #1
 800152e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    
    if (ep->is_in==0)
 8001532:	784b      	ldrb	r3, [r1, #1]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d14d      	bne.n	80015d4 <USB_ActivateEndpoint+0x2a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001538:	780a      	ldrb	r2, [r1, #0]
 800153a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	b29b      	uxth	r3, r3
 8001544:	b15b      	cbz	r3, 800155e <USB_ActivateEndpoint+0x22a>
 8001546:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800154a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800154e:	051b      	lsls	r3, r3, #20
 8001550:	0d1b      	lsrs	r3, r3, #20
 8001552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800155e:	780a      	ldrb	r2, [r1, #0]
 8001560:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001568:	b29b      	uxth	r3, r3
 800156a:	b15b      	cbz	r3, 8001584 <USB_ActivateEndpoint+0x250>
 800156c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001570:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001574:	051b      	lsls	r3, r3, #20
 8001576:	0d1b      	lsrs	r3, r3, #20
 8001578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001580:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8001584:	780a      	ldrb	r2, [r1, #0]
 8001586:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800158a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800158e:	051b      	lsls	r3, r3, #20
 8001590:	0d1b      	lsrs	r3, r3, #20
 8001592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001596:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800159a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800159e:	780c      	ldrb	r4, [r1, #0]
 80015a0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80015b2:	f248 0280 	movw	r2, #32896	; 0x8080
 80015b6:	4313      	orrs	r3, r2
 80015b8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80015bc:	7809      	ldrb	r1, [r1, #0]
 80015be:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015cc:	4313      	orrs	r3, r2
 80015ce:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80015d2:	e04a      	b.n	800166a <USB_ActivateEndpoint+0x336>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80015d4:	780a      	ldrb	r2, [r1, #0]
 80015d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b15b      	cbz	r3, 80015fa <USB_ActivateEndpoint+0x2c6>
 80015e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ea:	051b      	lsls	r3, r3, #20
 80015ec:	0d1b      	lsrs	r3, r3, #20
 80015ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80015fa:	780a      	ldrb	r2, [r1, #0]
 80015fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001604:	b29b      	uxth	r3, r3
 8001606:	b15b      	cbz	r3, 8001620 <USB_ActivateEndpoint+0x2ec>
 8001608:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800160c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001610:	051b      	lsls	r3, r3, #20
 8001612:	0d1b      	lsrs	r3, r3, #20
 8001614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800161c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001620:	780a      	ldrb	r2, [r1, #0]
 8001622:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800162a:	051b      	lsls	r3, r3, #20
 800162c:	0d1b      	lsrs	r3, r3, #20
 800162e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001636:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800163a:	780c      	ldrb	r4, [r1, #0]
 800163c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001640:	b29b      	uxth	r3, r3
 8001642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800164a:	f248 0280 	movw	r2, #32896	; 0x8080
 800164e:	4313      	orrs	r3, r2
 8001650:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001654:	7809      	ldrb	r1, [r1, #0]
 8001656:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800165a:	b29b      	uxth	r3, r3
 800165c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001664:	4313      	orrs	r3, r2
 8001666:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
    }
  }
  
  return HAL_OK;
}
 800166a:	2000      	movs	r0, #0
 800166c:	bc10      	pop	{r4}
 800166e:	4770      	bx	lr

08001670 <USB_DeactivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
 8001670:	7a8b      	ldrb	r3, [r1, #10]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d146      	bne.n	8001704 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in)
 8001676:	784b      	ldrb	r3, [r1, #1]
 8001678:	b313      	cbz	r3, 80016c0 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800167a:	780a      	ldrb	r2, [r1, #0]
 800167c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001684:	b29b      	uxth	r3, r3
 8001686:	b15b      	cbz	r3, 80016a0 <USB_DeactivateEndpoint+0x30>
 8001688:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800168c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	0d1b      	lsrs	r3, r3, #20
 8001694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001698:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800169c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80016a0:	780a      	ldrb	r2, [r1, #0]
 80016a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80016bc:	2000      	movs	r0, #0
 80016be:	4770      	bx	lr
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016c0:	780a      	ldrb	r2, [r1, #0]
 80016c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b15b      	cbz	r3, 80016e6 <USB_DeactivateEndpoint+0x76>
 80016ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016d6:	051b      	lsls	r3, r3, #20
 80016d8:	0d1b      	lsrs	r3, r3, #20
 80016da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80016e6:	780a      	ldrb	r2, [r1, #0]
 80016e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001702:	e7db      	b.n	80016bc <USB_DeactivateEndpoint+0x4c>
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001704:	b410      	push	{r4}
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8001706:	784b      	ldrb	r3, [r1, #1]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d14b      	bne.n	80017a4 <USB_DeactivateEndpoint+0x134>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800170c:	780a      	ldrb	r2, [r1, #0]
 800170e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	b29b      	uxth	r3, r3
 8001718:	b15b      	cbz	r3, 8001732 <USB_DeactivateEndpoint+0xc2>
 800171a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800171e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001722:	051b      	lsls	r3, r3, #20
 8001724:	0d1b      	lsrs	r3, r3, #20
 8001726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800172a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001732:	780a      	ldrb	r2, [r1, #0]
 8001734:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173c:	b29b      	uxth	r3, r3
 800173e:	b15b      	cbz	r3, 8001758 <USB_DeactivateEndpoint+0xe8>
 8001740:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001748:	051b      	lsls	r3, r3, #20
 800174a:	0d1b      	lsrs	r3, r3, #20
 800174c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001754:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8001758:	780a      	ldrb	r2, [r1, #0]
 800175a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800175e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001762:	051b      	lsls	r3, r3, #20
 8001764:	0d1b      	lsrs	r3, r3, #20
 8001766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800176e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001772:	780c      	ldrb	r4, [r1, #0]
 8001774:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001782:	f248 0280 	movw	r2, #32896	; 0x8080
 8001786:	4313      	orrs	r3, r2
 8001788:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800178c:	7809      	ldrb	r1, [r1, #0]
 800178e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001792:	b29b      	uxth	r3, r3
 8001794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800179c:	4313      	orrs	r3, r2
 800179e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80017a2:	e04a      	b.n	800183a <USB_DeactivateEndpoint+0x1ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017a4:	780a      	ldrb	r2, [r1, #0]
 80017a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	b15b      	cbz	r3, 80017ca <USB_DeactivateEndpoint+0x15a>
 80017b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ba:	051b      	lsls	r3, r3, #20
 80017bc:	0d1b      	lsrs	r3, r3, #20
 80017be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017ca:	780a      	ldrb	r2, [r1, #0]
 80017cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	b15b      	cbz	r3, 80017f0 <USB_DeactivateEndpoint+0x180>
 80017d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017e0:	051b      	lsls	r3, r3, #20
 80017e2:	0d1b      	lsrs	r3, r3, #20
 80017e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80017f0:	780a      	ldrb	r2, [r1, #0]
 80017f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017fa:	051b      	lsls	r3, r3, #20
 80017fc:	0d1b      	lsrs	r3, r3, #20
 80017fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001806:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800180a:	780c      	ldrb	r4, [r1, #0]
 800180c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800181a:	f248 0280 	movw	r2, #32896	; 0x8080
 800181e:	4313      	orrs	r3, r2
 8001820:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001824:	7809      	ldrb	r1, [r1, #0]
 8001826:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800182a:	b29b      	uxth	r3, r3
 800182c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001834:	4313      	orrs	r3, r2
 8001836:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
    }
  }
  
  return HAL_OK;
}
 800183a:	2000      	movs	r0, #0
 800183c:	bc10      	pop	{r4}
 800183e:	4770      	bx	lr

08001840 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001840:	780a      	ldrb	r2, [r1, #0]
 8001842:	b98a      	cbnz	r2, 8001868 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001844:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001848:	b29b      	uxth	r3, r3
 800184a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800184e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001852:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001856:	f083 0310 	eor.w	r3, r3, #16
 800185a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001862:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001866:	e020      	b.n	80018aa <USB_EPSetStall+0x6a>
  }
  else
  {
    if (ep->is_in)
 8001868:	784b      	ldrb	r3, [r1, #1]
 800186a:	b17b      	cbz	r3, 800188c <USB_EPSetStall+0x4c>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800186c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001870:	b29b      	uxth	r3, r3
 8001872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800187a:	f083 0310 	eor.w	r3, r3, #16
 800187e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001886:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800188a:	e00e      	b.n	80018aa <USB_EPSetStall+0x6a>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800188c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001890:	b29b      	uxth	r3, r3
 8001892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800189e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 80018aa:	2000      	movs	r0, #0
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80018b0:	784b      	ldrb	r3, [r1, #1]
 80018b2:	b31b      	cbz	r3, 80018fc <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018b4:	780a      	ldrb	r2, [r1, #0]
 80018b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b15b      	cbz	r3, 80018da <USB_EPClearStall+0x2a>
 80018c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ca:	051b      	lsls	r3, r3, #20
 80018cc:	0d1b      	lsrs	r3, r3, #20
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80018da:	780a      	ldrb	r2, [r1, #0]
 80018dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018ea:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80018ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80018fa:	e022      	b.n	8001942 <USB_EPClearStall+0x92>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018fc:	780a      	ldrb	r2, [r1, #0]
 80018fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	b29b      	uxth	r3, r3
 8001908:	b15b      	cbz	r3, 8001922 <USB_EPClearStall+0x72>
 800190a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800190e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001912:	051b      	lsls	r3, r3, #20
 8001914:	0d1b      	lsrs	r3, r3, #20
 8001916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001922:	780a      	ldrb	r2, [r1, #0]
 8001924:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001928:	b29b      	uxth	r3, r3
 800192a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800192e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001932:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001942:	2000      	movs	r0, #0
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001948:	b911      	cbnz	r1, 8001950 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001950:	2000      	movs	r0, #0
 8001952:	4770      	bx	lr

08001954 <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001954:	2000      	movs	r0, #0
 8001956:	4770      	bx	lr

08001958 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001958:	2000      	movs	r0, #0
 800195a:	4770      	bx	lr

0800195c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 800195c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001960:	b280      	uxth	r0, r0
 8001962:	4770      	bx	lr

08001964 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001964:	2000      	movs	r0, #0
 8001966:	4770      	bx	lr

08001968 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001968:	b410      	push	{r4}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800196a:	3301      	adds	r3, #1
 800196c:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800196e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8001976:	e007      	b.n	8001988 <USB_WritePMA+0x20>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001978:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800197a:	7848      	ldrb	r0, [r1, #1]
 800197c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8001980:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 8001984:	3102      	adds	r1, #2
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001986:	3b01      	subs	r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f5      	bne.n	8001978 <USB_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800198c:	bc10      	pop	{r4}
 800198e:	4770      	bx	lr

08001990 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8001990:	b570      	push	{r4, r5, r6, lr}
  uint16_t pmabuffer = 0;
  uint32_t len = ep->xfer_len;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8001992:	784a      	ldrb	r2, [r1, #1]
 8001994:	2a01      	cmp	r2, #1
 8001996:	f040 80c2 	bne.w	8001b1e <USB_EPStartXfer+0x18e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800199a:	698e      	ldr	r6, [r1, #24]
 800199c:	690b      	ldr	r3, [r1, #16]
 800199e:	429e      	cmp	r6, r3
 80019a0:	d903      	bls.n	80019aa <USB_EPStartXfer+0x1a>
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 80019a2:	1af6      	subs	r6, r6, r3
 80019a4:	618e      	str	r6, [r1, #24]
  if (ep->is_in == 1)
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
 80019a6:	461e      	mov	r6, r3
 80019a8:	e001      	b.n	80019ae <USB_EPStartXfer+0x1e>
      ep->xfer_len-=len; 
    }
    else
    {  
      len=ep->xfer_len;
      ep->xfer_len =0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	618b      	str	r3, [r1, #24]
 80019ae:	460d      	mov	r5, r1
 80019b0:	4604      	mov	r4, r0
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 80019b2:	7a8b      	ldrb	r3, [r1, #10]
 80019b4:	b983      	cbnz	r3, 80019d8 <USB_EPStartXfer+0x48>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80019b6:	b2b3      	uxth	r3, r6
 80019b8:	888a      	ldrh	r2, [r1, #4]
 80019ba:	6949      	ldr	r1, [r1, #20]
 80019bc:	f7ff ffd4 	bl	8001968 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80019c0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	782a      	ldrb	r2, [r5, #0]
 80019c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019cc:	3302      	adds	r3, #2
 80019ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80019d2:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 80019d6:	e091      	b.n	8001afc <USB_EPStartXfer+0x16c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80019d8:	7809      	ldrb	r1, [r1, #0]
 80019da:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80019de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b39b      	cbz	r3, 8001a4e <USB_EPStartXfer+0xbe>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80019e6:	bb22      	cbnz	r2, 8001a32 <USB_EPStartXfer+0xa2>
 80019e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80019f2:	3106      	adds	r1, #6
 80019f4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80019f8:	2e3e      	cmp	r6, #62	; 0x3e
 80019fa:	d90e      	bls.n	8001a1a <USB_EPStartXfer+0x8a>
 80019fc:	f3c6 134f 	ubfx	r3, r6, #5, #16
 8001a00:	f016 0f1f 	tst.w	r6, #31
 8001a04:	d101      	bne.n	8001a0a <USB_EPStartXfer+0x7a>
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8001a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8001a18:	e017      	b.n	8001a4a <USB_EPStartXfer+0xba>
 8001a1a:	f3c6 034f 	ubfx	r3, r6, #1, #16
 8001a1e:	f016 0f01 	tst.w	r6, #1
 8001a22:	d001      	beq.n	8001a28 <USB_EPStartXfer+0x98>
 8001a24:	3301      	adds	r3, #1
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	029b      	lsls	r3, r3, #10
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8001a30:	e00b      	b.n	8001a4a <USB_EPStartXfer+0xba>
 8001a32:	2a01      	cmp	r2, #1
 8001a34:	d109      	bne.n	8001a4a <USB_EPStartXfer+0xba>
 8001a36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001a40:	3302      	adds	r3, #2
 8001a42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a46:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001a4a:	892a      	ldrh	r2, [r5, #8]
 8001a4c:	e032      	b.n	8001ab4 <USB_EPStartXfer+0x124>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001a4e:	bb22      	cbnz	r2, 8001a9a <USB_EPStartXfer+0x10a>
 8001a50:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001a5a:	3102      	adds	r1, #2
 8001a5c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8001a60:	2e3e      	cmp	r6, #62	; 0x3e
 8001a62:	d90e      	bls.n	8001a82 <USB_EPStartXfer+0xf2>
 8001a64:	f3c6 134f 	ubfx	r3, r6, #5, #16
 8001a68:	f016 0f1f 	tst.w	r6, #31
 8001a6c:	d101      	bne.n	8001a72 <USB_EPStartXfer+0xe2>
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8001a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8001a80:	e017      	b.n	8001ab2 <USB_EPStartXfer+0x122>
 8001a82:	f3c6 034f 	ubfx	r3, r6, #1, #16
 8001a86:	f016 0f01 	tst.w	r6, #1
 8001a8a:	d001      	beq.n	8001a90 <USB_EPStartXfer+0x100>
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	029b      	lsls	r3, r3, #10
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8001a98:	e00b      	b.n	8001ab2 <USB_EPStartXfer+0x122>
 8001a9a:	2a01      	cmp	r2, #1
 8001a9c:	d109      	bne.n	8001ab2 <USB_EPStartXfer+0x122>
 8001a9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001aae:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8001ab2:	88ea      	ldrh	r2, [r5, #6]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001ab4:	b2b3      	uxth	r3, r6
 8001ab6:	6969      	ldr	r1, [r5, #20]
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff ff55 	bl	8001968 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001abe:	786b      	ldrb	r3, [r5, #1]
 8001ac0:	b96b      	cbnz	r3, 8001ade <USB_EPStartXfer+0x14e>
 8001ac2:	782a      	ldrb	r2, [r5, #0]
 8001ac4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001acc:	051b      	lsls	r3, r3, #20
 8001ace:	0d1b      	lsrs	r3, r3, #20
 8001ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ad8:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8001adc:	e00e      	b.n	8001afc <USB_EPStartXfer+0x16c>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d10c      	bne.n	8001afc <USB_EPStartXfer+0x16c>
 8001ae2:	782a      	ldrb	r2, [r5, #0]
 8001ae4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aec:	051b      	lsls	r3, r3, #20
 8001aee:	0d1b      	lsrs	r3, r3, #20
 8001af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001afc:	782a      	ldrb	r2, [r5, #0]
 8001afe:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b0c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8001b1c:	e0aa      	b.n	8001c74 <USB_EPStartXfer+0x2e4>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8001b1e:	698b      	ldr	r3, [r1, #24]
 8001b20:	690c      	ldr	r4, [r1, #16]
 8001b22:	42a3      	cmp	r3, r4
 8001b24:	d903      	bls.n	8001b2e <USB_EPStartXfer+0x19e>
    {
      len=ep->maxpacket;
      ep->xfer_len-=len; 
 8001b26:	1b1b      	subs	r3, r3, r4
 8001b28:	618b      	str	r3, [r1, #24]
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    {
      len=ep->maxpacket;
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	e001      	b.n	8001b32 <USB_EPStartXfer+0x1a2>
      ep->xfer_len-=len; 
    }
    else
    {
      len=ep->xfer_len;
      ep->xfer_len =0;
 8001b2e:	2400      	movs	r4, #0
 8001b30:	618c      	str	r4, [r1, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8001b32:	7a8c      	ldrb	r4, [r1, #10]
 8001b34:	bb2c      	cbnz	r4, 8001b82 <USB_EPStartXfer+0x1f2>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001b36:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	780c      	ldrb	r4, [r1, #0]
 8001b3e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b42:	3206      	adds	r2, #6
 8001b44:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001b48:	2b3e      	cmp	r3, #62	; 0x3e
 8001b4a:	d90e      	bls.n	8001b6a <USB_EPStartXfer+0x1da>
 8001b4c:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001b50:	f013 0f1f 	tst.w	r3, #31
 8001b54:	d101      	bne.n	8001b5a <USB_EPStartXfer+0x1ca>
 8001b56:	3c01      	subs	r4, #1
 8001b58:	b2a4      	uxth	r4, r4
 8001b5a:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001b5e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001b62:	b2a4      	uxth	r4, r4
 8001b64:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001b68:	e074      	b.n	8001c54 <USB_EPStartXfer+0x2c4>
 8001b6a:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001b6e:	f013 0f01 	tst.w	r3, #1
 8001b72:	d001      	beq.n	8001b78 <USB_EPStartXfer+0x1e8>
 8001b74:	3401      	adds	r4, #1
 8001b76:	b2a4      	uxth	r4, r4
 8001b78:	02a4      	lsls	r4, r4, #10
 8001b7a:	b2a4      	uxth	r4, r4
 8001b7c:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001b80:	e068      	b.n	8001c54 <USB_EPStartXfer+0x2c4>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001b82:	bb2a      	cbnz	r2, 8001bd0 <USB_EPStartXfer+0x240>
 8001b84:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001b88:	b292      	uxth	r2, r2
 8001b8a:	780c      	ldrb	r4, [r1, #0]
 8001b8c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001b90:	3202      	adds	r2, #2
 8001b92:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001b96:	2b3e      	cmp	r3, #62	; 0x3e
 8001b98:	d90e      	bls.n	8001bb8 <USB_EPStartXfer+0x228>
 8001b9a:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001b9e:	f013 0f1f 	tst.w	r3, #31
 8001ba2:	d101      	bne.n	8001ba8 <USB_EPStartXfer+0x218>
 8001ba4:	3c01      	subs	r4, #1
 8001ba6:	b2a4      	uxth	r4, r4
 8001ba8:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001bac:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001bb0:	b2a4      	uxth	r4, r4
 8001bb2:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001bb6:	e018      	b.n	8001bea <USB_EPStartXfer+0x25a>
 8001bb8:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001bbc:	f013 0f01 	tst.w	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <USB_EPStartXfer+0x236>
 8001bc2:	3401      	adds	r4, #1
 8001bc4:	b2a4      	uxth	r4, r4
 8001bc6:	02a4      	lsls	r4, r4, #10
 8001bc8:	b2a4      	uxth	r4, r4
 8001bca:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001bce:	e00c      	b.n	8001bea <USB_EPStartXfer+0x25a>
 8001bd0:	2a01      	cmp	r2, #1
 8001bd2:	d10a      	bne.n	8001bea <USB_EPStartXfer+0x25a>
 8001bd4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	780c      	ldrb	r4, [r1, #0]
 8001bdc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001be0:	3202      	adds	r2, #2
 8001be2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001be6:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001bea:	784a      	ldrb	r2, [r1, #1]
 8001bec:	bb2a      	cbnz	r2, 8001c3a <USB_EPStartXfer+0x2aa>
 8001bee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	780c      	ldrb	r4, [r1, #0]
 8001bf6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001bfa:	3206      	adds	r2, #6
 8001bfc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001c00:	2b3e      	cmp	r3, #62	; 0x3e
 8001c02:	d90e      	bls.n	8001c22 <USB_EPStartXfer+0x292>
 8001c04:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8001c08:	f013 0f1f 	tst.w	r3, #31
 8001c0c:	d101      	bne.n	8001c12 <USB_EPStartXfer+0x282>
 8001c0e:	3c01      	subs	r4, #1
 8001c10:	b2a4      	uxth	r4, r4
 8001c12:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001c16:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001c1a:	b2a4      	uxth	r4, r4
 8001c1c:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001c20:	e018      	b.n	8001c54 <USB_EPStartXfer+0x2c4>
 8001c22:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8001c26:	f013 0f01 	tst.w	r3, #1
 8001c2a:	d001      	beq.n	8001c30 <USB_EPStartXfer+0x2a0>
 8001c2c:	3401      	adds	r4, #1
 8001c2e:	b2a4      	uxth	r4, r4
 8001c30:	02a4      	lsls	r4, r4, #10
 8001c32:	b2a4      	uxth	r4, r4
 8001c34:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8001c38:	e00c      	b.n	8001c54 <USB_EPStartXfer+0x2c4>
 8001c3a:	2a01      	cmp	r2, #1
 8001c3c:	d10a      	bne.n	8001c54 <USB_EPStartXfer+0x2c4>
 8001c3e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c42:	b292      	uxth	r2, r2
 8001c44:	780c      	ldrb	r4, [r1, #0]
 8001c46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001c4a:	3202      	adds	r2, #2
 8001c4c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001c50:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c54:	780a      	ldrb	r2, [r1, #0]
 8001c56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c64:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  
  return HAL_OK;
}
 8001c74:	2000      	movs	r0, #0
 8001c76:	bd70      	pop	{r4, r5, r6, pc}

08001c78 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001c78:	3301      	adds	r3, #1
 8001c7a:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c7c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001c80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8001c84:	e004      	b.n	8001c90 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001c86:	6810      	ldr	r0, [r2, #0]
 8001c88:	f821 0b02 	strh.w	r0, [r1], #2
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001c8c:	3b01      	subs	r3, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001c8e:	3204      	adds	r2, #4
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f8      	bne.n	8001c86 <USB_ReadPMA+0xe>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001c98:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d021      	beq.n	8001ce4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001ca0:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001cae:	6804      	ldr	r4, [r0, #0]
 8001cb0:	6863      	ldr	r3, [r4, #4]
 8001cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb6:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001cb8:	6804      	ldr	r4, [r0, #0]
 8001cba:	6865      	ldr	r5, [r4, #4]
 8001cbc:	680b      	ldr	r3, [r1, #0]
 8001cbe:	432b      	orrs	r3, r5
 8001cc0:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001cc2:	6804      	ldr	r4, [r0, #0]
 8001cc4:	68a3      	ldr	r3, [r4, #8]
 8001cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cca:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ccc:	6804      	ldr	r4, [r0, #0]
 8001cce:	68a5      	ldr	r5, [r4, #8]
 8001cd0:	684b      	ldr	r3, [r1, #4]
 8001cd2:	432b      	orrs	r3, r5
 8001cd4:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001cd6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	e001      	b.n	8001ce8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001ce8:	bc30      	pop	{r4, r5}
 8001cea:	4770      	bx	lr

08001cec <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop

08001cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cf4:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cf6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cf8:	6a04      	ldr	r4, [r0, #32]
 8001cfa:	f024 0401 	bic.w	r4, r4, #1
 8001cfe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d00:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d02:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001d06:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d0a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001d0e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d10:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d12:	6201      	str	r1, [r0, #32]
}
 8001d14:	bc10      	pop	{r4}
 8001d16:	4770      	bx	lr

08001d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d18:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d1a:	6a03      	ldr	r3, [r0, #32]
 8001d1c:	f023 0310 	bic.w	r3, r3, #16
 8001d20:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d22:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d24:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d26:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001d2a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001d32:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d36:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d38:	6201      	str	r1, [r0, #32]
}
 8001d3a:	bc10      	pop	{r4}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001d40:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d46:	f041 0107 	orr.w	r1, r1, #7
 8001d4a:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001d4c:	6081      	str	r1, [r0, #8]
 8001d4e:	4770      	bx	lr

08001d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d50:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8001d52:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d54:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001d58:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001d5c:	4319      	orrs	r1, r3
 8001d5e:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d62:	6083      	str	r3, [r0, #8]
}
 8001d64:	bc10      	pop	{r4}
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d68:	6802      	ldr	r2, [r0, #0]
 8001d6a:	68d3      	ldr	r3, [r2, #12]
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	60d3      	str	r3, [r2, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d72:	6802      	ldr	r2, [r0, #0]
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f000 8083 	beq.w	8001e94 <HAL_TIM_ConfigClockSource+0x110>
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001d8e:	b510      	push	{r4, lr}
 8001d90:	4604      	mov	r4, r0
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d92:	2301      	movs	r3, #1
 8001d94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d9e:	6802      	ldr	r2, [r0, #0]
 8001da0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001daa:	6093      	str	r3, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dac:	680b      	ldr	r3, [r1, #0]
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	d04c      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0xc8>
 8001db2:	d80a      	bhi.n	8001dca <HAL_TIM_ConfigClockSource+0x46>
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d058      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0xe6>
 8001db8:	d802      	bhi.n	8001dc0 <HAL_TIM_ConfigClockSource+0x3c>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d050      	beq.n	8001e60 <HAL_TIM_ConfigClockSource+0xdc>
 8001dbe:	e062      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d057      	beq.n	8001e74 <HAL_TIM_ConfigClockSource+0xf0>
 8001dc4:	2b30      	cmp	r3, #48	; 0x30
 8001dc6:	d05a      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0xfa>
 8001dc8:	e05d      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
 8001dca:	2b70      	cmp	r3, #112	; 0x70
 8001dcc:	d012      	beq.n	8001df4 <HAL_TIM_ConfigClockSource+0x70>
 8001dce:	d804      	bhi.n	8001dda <HAL_TIM_ConfigClockSource+0x56>
 8001dd0:	2b50      	cmp	r3, #80	; 0x50
 8001dd2:	d027      	beq.n	8001e24 <HAL_TIM_ConfigClockSource+0xa0>
 8001dd4:	2b60      	cmp	r3, #96	; 0x60
 8001dd6:	d02f      	beq.n	8001e38 <HAL_TIM_ConfigClockSource+0xb4>
 8001dd8:	e055      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
 8001dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dde:	d003      	beq.n	8001de8 <HAL_TIM_ConfigClockSource+0x64>
 8001de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de4:	d012      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0x88>
 8001de6:	e04e      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001de8:	6802      	ldr	r2, [r0, #0]
 8001dea:	6893      	ldr	r3, [r2, #8]
 8001dec:	f023 0307 	bic.w	r3, r3, #7
 8001df0:	6093      	str	r3, [r2, #8]
    }
    break;
 8001df2:	e048      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001df4:	68cb      	ldr	r3, [r1, #12]
 8001df6:	684a      	ldr	r2, [r1, #4]
 8001df8:	6889      	ldr	r1, [r1, #8]
 8001dfa:	6800      	ldr	r0, [r0, #0]
 8001dfc:	f7ff ffa8 	bl	8001d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8001e00:	6822      	ldr	r2, [r4, #0]
 8001e02:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e08:	6093      	str	r3, [r2, #8]
    }
    break;
 8001e0a:	e03c      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e0c:	68cb      	ldr	r3, [r1, #12]
 8001e0e:	684a      	ldr	r2, [r1, #4]
 8001e10:	6889      	ldr	r1, [r1, #8]
 8001e12:	6800      	ldr	r0, [r0, #0]
 8001e14:	f7ff ff9c 	bl	8001d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	6893      	ldr	r3, [r2, #8]
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6093      	str	r3, [r2, #8]
    }
    break;
 8001e22:	e030      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e24:	68ca      	ldr	r2, [r1, #12]
 8001e26:	6849      	ldr	r1, [r1, #4]
 8001e28:	6800      	ldr	r0, [r0, #0]
 8001e2a:	f7ff ff63 	bl	8001cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e2e:	2150      	movs	r1, #80	; 0x50
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	f7ff ff85 	bl	8001d40 <TIM_ITRx_SetConfig>
    }
    break;
 8001e36:	e026      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e38:	68ca      	ldr	r2, [r1, #12]
 8001e3a:	6849      	ldr	r1, [r1, #4]
 8001e3c:	6800      	ldr	r0, [r0, #0]
 8001e3e:	f7ff ff6b 	bl	8001d18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e42:	2160      	movs	r1, #96	; 0x60
 8001e44:	6820      	ldr	r0, [r4, #0]
 8001e46:	f7ff ff7b 	bl	8001d40 <TIM_ITRx_SetConfig>
    }
    break;
 8001e4a:	e01c      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4c:	68ca      	ldr	r2, [r1, #12]
 8001e4e:	6849      	ldr	r1, [r1, #4]
 8001e50:	6800      	ldr	r0, [r0, #0]
 8001e52:	f7ff ff4f 	bl	8001cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e56:	2140      	movs	r1, #64	; 0x40
 8001e58:	6820      	ldr	r0, [r4, #0]
 8001e5a:	f7ff ff71 	bl	8001d40 <TIM_ITRx_SetConfig>
    }
    break;
 8001e5e:	e012      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR0:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001e60:	2100      	movs	r1, #0
 8001e62:	6800      	ldr	r0, [r0, #0]
 8001e64:	f7ff ff6c 	bl	8001d40 <TIM_ITRx_SetConfig>
    }
    break;
 8001e68:	e00d      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	6800      	ldr	r0, [r0, #0]
 8001e6e:	f7ff ff67 	bl	8001d40 <TIM_ITRx_SetConfig>
    }
    break;
 8001e72:	e008      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001e74:	2120      	movs	r1, #32
 8001e76:	6800      	ldr	r0, [r0, #0]
 8001e78:	f7ff ff62 	bl	8001d40 <TIM_ITRx_SetConfig>
    }
    break;
 8001e7c:	e003      	b.n	8001e86 <HAL_TIM_ConfigClockSource+0x102>
  case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001e7e:	2130      	movs	r1, #48	; 0x30
 8001e80:	6800      	ldr	r0, [r0, #0]
 8001e82:	f7ff ff5d 	bl	8001d40 <TIM_ITRx_SetConfig>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
 8001e92:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e94:	2002      	movs	r0, #2
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop

08001ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eac:	6803      	ldr	r3, [r0, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	f012 0f02 	tst.w	r2, #2
 8001eb4:	d017      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x3e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	f012 0f02 	tst.w	r2, #2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x3e>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ebe:	f06f 0202 	mvn.w	r2, #2
 8001ec2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	7603      	strb	r3, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001ec8:	6803      	ldr	r3, [r0, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f013 0f03 	tst.w	r3, #3
 8001ed0:	d002      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x30>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	f7ff ffe3 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001ed6:	e004      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x3a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	4620      	mov	r0, r4
 8001ede:	f7ff ffdf 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	f012 0f04 	tst.w	r2, #4
 8001eee:	d019      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	f012 0f04 	tst.w	r2, #4
 8001ef6:	d015      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	7623      	strb	r3, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x6c>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ffc5 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001f12:	e005      	b.n	8001f20 <HAL_TIM_IRQHandler+0x78>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	4620      	mov	r0, r4
 8001f16:	f7ff ffbf 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff ffc0 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	2300      	movs	r3, #0
 8001f22:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	f012 0f08 	tst.w	r2, #8
 8001f2c:	d019      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	f012 0f08 	tst.w	r2, #8
 8001f34:	d015      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f36:	f06f 0208 	mvn.w	r2, #8
 8001f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	7623      	strb	r3, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f013 0f03 	tst.w	r3, #3
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xaa>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7ff ffa6 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xb6>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff ffa0 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ffa1 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	f012 0f10 	tst.w	r2, #16
 8001f6a:	d019      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0xf8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	f012 0f10 	tst.w	r2, #16
 8001f72:	d015      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0xf8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f74:	f06f 0210 	mvn.w	r2, #16
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	7623      	strb	r3, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f86:	d003      	beq.n	8001f90 <HAL_TIM_IRQHandler+0xe8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff ff87 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001f8e:	e005      	b.n	8001f9c <HAL_TIM_IRQHandler+0xf4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff ff81 	bl	8001e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7ff ff82 	bl	8001ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	f012 0f01 	tst.w	r2, #1
 8001fa8:	d009      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	f012 0f01 	tst.w	r2, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb2:	f06f 0201 	mvn.w	r2, #1
 8001fb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7fe fb61 	bl	8000680 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fc6:	d009      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x134>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fce:	d005      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x134>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7ff fe8a 	bl	8001cf0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fe4:	d009      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x152>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fec:	d005      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x152>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ff2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff55 	bl	8001ea4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	f012 0f20 	tst.w	r2, #32
 8002002:	d009      	beq.n	8002018 <HAL_TIM_IRQHandler+0x170>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	f012 0f20 	tst.w	r2, #32
 800200a:	d005      	beq.n	8002018 <HAL_TIM_IRQHandler+0x170>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800200c:	f06f 0220 	mvn.w	r2, #32
 8002010:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff fe6a 	bl	8001cec <HAL_TIMEx_CommutationCallback>
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop

0800201c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800201c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <TIM_Base_SetConfig+0x64>)
 8002020:	4290      	cmp	r0, r2
 8002022:	d00a      	beq.n	800203a <TIM_Base_SetConfig+0x1e>
 8002024:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002028:	d007      	beq.n	800203a <TIM_Base_SetConfig+0x1e>
 800202a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800202e:	4290      	cmp	r0, r2
 8002030:	d003      	beq.n	800203a <TIM_Base_SetConfig+0x1e>
 8002032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002036:	4290      	cmp	r0, r2
 8002038:	d103      	bne.n	8002042 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800203e:	684a      	ldr	r2, [r1, #4]
 8002040:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <TIM_Base_SetConfig+0x64>)
 8002044:	4290      	cmp	r0, r2
 8002046:	d00a      	beq.n	800205e <TIM_Base_SetConfig+0x42>
 8002048:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0x42>
 800204e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002052:	4290      	cmp	r0, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0x42>
 8002056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800205a:	4290      	cmp	r0, r2
 800205c:	d103      	bne.n	8002066 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002062:	68ca      	ldr	r2, [r1, #12]
 8002064:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8002066:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	688b      	ldr	r3, [r1, #8]
 800206a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800206c:	680b      	ldr	r3, [r1, #0]
 800206e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <TIM_Base_SetConfig+0x64>)
 8002072:	4298      	cmp	r0, r3
 8002074:	d101      	bne.n	800207a <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002076:	690b      	ldr	r3, [r1, #16]
 8002078:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800207a:	2301      	movs	r3, #1
 800207c:	6143      	str	r3, [r0, #20]
 800207e:	4770      	bx	lr
 8002080:	40012c00 	.word	0x40012c00

08002084 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002084:	b1b8      	cbz	r0, 80020b6 <HAL_TIM_Base_Init+0x32>
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800208a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800208e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002092:	d104      	bne.n	800209e <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002094:	2300      	movs	r3, #0
 8002096:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209a:	f7fe fa8f 	bl	80005bc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a4:	1d21      	adds	r1, r4, #4
 80020a6:	6820      	ldr	r0, [r4, #0]
 80020a8:	f7ff ffb8 	bl	800201c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80020b2:	2000      	movs	r0, #0
 80020b4:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80020b6:	2001      	movs	r0, #1
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <HAL_TIM_OnePulse_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80020bc:	b308      	cbz	r0, 8002102 <HAL_TIM_OnePulse_Init+0x46>
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses wil be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80020be:	b538      	push	{r3, r4, r5, lr}
 80020c0:	4604      	mov	r4, r0
 80020c2:	460d      	mov	r5, r1
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));

  if(htim->State == HAL_TIM_STATE_RESET)
 80020c4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80020cc:	d104      	bne.n	80020d8 <HAL_TIM_OnePulse_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80020d4:	f7ff fe54 	bl	8001d80 <HAL_TIM_OnePulse_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80020d8:	2302      	movs	r3, #2
 80020da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020de:	1d21      	adds	r1, r4, #4
 80020e0:	6820      	ldr	r0, [r4, #0]
 80020e2:	f7ff ff9b 	bl	800201c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80020e6:	6822      	ldr	r2, [r4, #0]
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f023 0308 	bic.w	r3, r3, #8
 80020ee:	6013      	str	r3, [r2, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	4329      	orrs	r1, r5
 80020f6:	6019      	str	r1, [r3, #0]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80020fe:	2000      	movs	r0, #0
 8002100:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002102:	2001      	movs	r0, #1
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	b083      	sub	sp, #12
 800210c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800210e:	6803      	ldr	r3, [r0, #0]
 8002110:	f013 0f01 	tst.w	r3, #1
 8002114:	d06f      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800211e:	61da      	str	r2, [r3, #28]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4a43      	ldr	r2, [pc, #268]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212c:	6813      	ldr	r3, [r2, #0]
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002134:	f001 faec 	bl	8003710 <HAL_GetTick>
 8002138:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800213a:	e004      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f001 fae8 	bl	8003710 <HAL_GetTick>
 8002140:	1b40      	subs	r0, r0, r5
 8002142:	2864      	cmp	r0, #100	; 0x64
 8002144:	d86f      	bhi.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    SET_BIT(PWR->CR, PWR_CR_DBP);
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800214e:	d0f5      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x34>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002150:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002154:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002158:	d046      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002160:	4293      	cmp	r3, r2
 8002162:	d041      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002164:	4833      	ldr	r0, [pc, #204]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002166:	6a01      	ldr	r1, [r0, #32]
 8002168:	f421 7640 	bic.w	r6, r1, #768	; 0x300
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002170:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	4d30      	ldr	r5, [pc, #192]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800217a:	2701      	movs	r7, #1
 800217c:	f845 7022 	str.w	r7, [r5, r2, lsl #2]
 8002180:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	2200      	movs	r2, #0
 800218a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800218e:	6206      	str	r6, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002190:	f011 0f01 	tst.w	r1, #1
 8002194:	d028      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002196:	f001 fabb 	bl	8003710 <HAL_GetTick>
 800219a:	4605      	mov	r5, r0
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e006      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f001 fab7 	bl	8003710 <HAL_GetTick>
 80021a2:	1b40      	subs	r0, r0, r5
 80021a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80021a8:	4298      	cmp	r0, r3
 80021aa:	d83e      	bhi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x122>
 80021ac:	2302      	movs	r3, #2
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d102      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	e001      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80021ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d0:	2302      	movs	r3, #2
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	f013 0f01 	tst.w	r3, #1
 80021e6:	d0da      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x96>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80021ea:	6a0b      	ldr	r3, [r1, #32]
 80021ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f0:	6863      	ldr	r3, [r4, #4]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	620b      	str	r3, [r1, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	f013 0f02 	tst.w	r3, #2
 80021fc:	d006      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021fe:	490d      	ldr	r1, [pc, #52]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002200:	684b      	ldr	r3, [r1, #4]
 8002202:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	f013 0f10 	tst.w	r3, #16
 8002212:	d00c      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002214:	4907      	ldr	r1, [pc, #28]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002216:	684b      	ldr	r3, [r1, #4]
 8002218:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800221c:	68e3      	ldr	r3, [r4, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002222:	2000      	movs	r0, #0
 8002224:	e004      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x128>
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8002226:	2003      	movs	r0, #3
 8002228:	e002      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x128>
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800222a:	2003      	movs	r0, #3
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x128>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800222e:	2000      	movs	r0, #0
}
 8002230:	b003      	add	sp, #12
 8002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
 800223c:	42420400 	.word	0x42420400

08002240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b530      	push	{r4, r5, lr}
 8002242:	b083      	sub	sp, #12
 8002244:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	6803      	ldr	r3, [r0, #0]
 8002248:	f013 0f01 	tst.w	r3, #1
 800224c:	f000 8096 	beq.w	800237c <HAL_RCC_OscConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002250:	4bb2      	ldr	r3, [pc, #712]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b04      	cmp	r3, #4
 800225a:	d00a      	beq.n	8002272 <HAL_RCC_OscConfig+0x32>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800225c:	4baf      	ldr	r3, [pc, #700]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d11b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x60>
 8002268:	4bac      	ldr	r3, [pc, #688]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x60>
 8002272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002276:	fa93 f3a3 	rbit	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	4ba8      	ldr	r3, [pc, #672]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	f013 0f01 	tst.w	r3, #1
 8002296:	d071      	beq.n	800237c <HAL_RCC_OscConfig+0x13c>
 8002298:	6863      	ldr	r3, [r4, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d16e      	bne.n	800237c <HAL_RCC_OscConfig+0x13c>
 800229e:	e2a0      	b.n	80027e2 <HAL_RCC_OscConfig+0x5a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	6863      	ldr	r3, [r4, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a6:	d105      	bne.n	80022b4 <HAL_RCC_OscConfig+0x74>
 80022a8:	4a9c      	ldr	r2, [pc, #624]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e026      	b.n	8002302 <HAL_RCC_OscConfig+0xc2>
 80022b4:	b963      	cbnz	r3, 80022d0 <HAL_RCC_OscConfig+0x90>
 80022b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e018      	b.n	8002302 <HAL_RCC_OscConfig+0xc2>
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xb0>
 80022d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022da:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xc2>
 80022f0:	4b8a      	ldr	r3, [pc, #552]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002300:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002302:	6863      	ldr	r3, [r4, #4]
 8002304:	b1eb      	cbz	r3, 8002342 <HAL_RCC_OscConfig+0x102>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f001 fa03 	bl	8003710 <HAL_GetTick>
 800230a:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230c:	e005      	b.n	800231a <HAL_RCC_OscConfig+0xda>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230e:	f001 f9ff 	bl	8003710 <HAL_GetTick>
 8002312:	1b40      	subs	r0, r0, r5
 8002314:	2864      	cmp	r0, #100	; 0x64
 8002316:	f200 8266 	bhi.w	80027e6 <HAL_RCC_OscConfig+0x5a6>
 800231a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231e:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b7e      	ldr	r3, [pc, #504]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	f013 0f01 	tst.w	r3, #1
 800233e:	d0e6      	beq.n	800230e <HAL_RCC_OscConfig+0xce>
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x13c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f001 f9e5 	bl	8003710 <HAL_GetTick>
 8002346:	4605      	mov	r5, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002348:	e005      	b.n	8002356 <HAL_RCC_OscConfig+0x116>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800234a:	f001 f9e1 	bl	8003710 <HAL_GetTick>
 800234e:	1b40      	subs	r0, r0, r5
 8002350:	2864      	cmp	r0, #100	; 0x64
 8002352:	f200 824a 	bhi.w	80027ea <HAL_RCC_OscConfig+0x5aa>
 8002356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235a:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	f013 0f01 	tst.w	r3, #1
 800237a:	d1e6      	bne.n	800234a <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	f013 0f02 	tst.w	r3, #2
 8002382:	f000 8090 	beq.w	80024a6 <HAL_RCC_OscConfig+0x266>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f013 0f0c 	tst.w	r3, #12
 800238e:	d00a      	beq.n	80023a6 <HAL_RCC_OscConfig+0x166>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002390:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d127      	bne.n	80023ec <HAL_RCC_OscConfig+0x1ac>
 800239c:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80023a4:	d122      	bne.n	80023ec <HAL_RCC_OscConfig+0x1ac>
 80023a6:	2302      	movs	r3, #2
 80023a8:	fa93 f3a3 	rbit	r3, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ac:	4b5b      	ldr	r3, [pc, #364]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2302      	movs	r3, #2
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	f013 0f01 	tst.w	r3, #1
 80023c6:	d003      	beq.n	80023d0 <HAL_RCC_OscConfig+0x190>
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	f040 820f 	bne.w	80027ee <HAL_RCC_OscConfig+0x5ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4852      	ldr	r0, [pc, #328]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 80023d2:	6803      	ldr	r3, [r0, #0]
 80023d4:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 80023d8:	6963      	ldr	r3, [r4, #20]
 80023da:	22f8      	movs	r2, #248	; 0xf8
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	4093      	lsls	r3, r2
 80023e6:	430b      	orrs	r3, r1
 80023e8:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	e05c      	b.n	80024a6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ec:	6923      	ldr	r3, [r4, #16]
 80023ee:	b39b      	cbz	r3, 8002458 <HAL_RCC_OscConfig+0x218>
 80023f0:	2201      	movs	r2, #1
 80023f2:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002400:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002404:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f001 f983 	bl	8003710 <HAL_GetTick>
 800240a:	4605      	mov	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e005      	b.n	800241a <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f001 f97f 	bl	8003710 <HAL_GetTick>
 8002412:	1b40      	subs	r0, r0, r5
 8002414:	2802      	cmp	r0, #2
 8002416:	f200 81ec 	bhi.w	80027f2 <HAL_RCC_OscConfig+0x5b2>
 800241a:	2302      	movs	r3, #2
 800241c:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2302      	movs	r3, #2
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	f013 0f01 	tst.w	r3, #1
 800243a:	d0e8      	beq.n	800240e <HAL_RCC_OscConfig+0x1ce>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4837      	ldr	r0, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 800243e:	6803      	ldr	r3, [r0, #0]
 8002440:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 8002444:	6963      	ldr	r3, [r4, #20]
 8002446:	22f8      	movs	r2, #248	; 0xf8
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	fab2 f282 	clz	r2, r2
 8002450:	4093      	lsls	r3, r2
 8002452:	430b      	orrs	r3, r1
 8002454:	6003      	str	r3, [r0, #0]
 8002456:	e026      	b.n	80024a6 <HAL_RCC_OscConfig+0x266>
 8002458:	2301      	movs	r3, #1
 800245a:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002468:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f001 f94e 	bl	8003710 <HAL_GetTick>
 8002474:	4605      	mov	r5, r0
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	e005      	b.n	8002484 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002478:	f001 f94a 	bl	8003710 <HAL_GetTick>
 800247c:	1b40      	subs	r0, r0, r5
 800247e:	2802      	cmp	r0, #2
 8002480:	f200 81b9 	bhi.w	80027f6 <HAL_RCC_OscConfig+0x5b6>
 8002484:	2302      	movs	r3, #2
 8002486:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2302      	movs	r3, #2
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	f013 0f01 	tst.w	r3, #1
 80024a4:	d1e8      	bne.n	8002478 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	f013 0f08 	tst.w	r3, #8
 80024ac:	d052      	beq.n	8002554 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ae:	69a3      	ldr	r3, [r4, #24]
 80024b0:	b33b      	cbz	r3, 8002502 <HAL_RCC_OscConfig+0x2c2>
 80024b2:	2201      	movs	r2, #1
 80024b4:	fa92 f3a2 	rbit	r3, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	4918      	ldr	r1, [pc, #96]	; (8002520 <HAL_RCC_OscConfig+0x2e0>)
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f001 f925 	bl	8003710 <HAL_GetTick>
 80024c6:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c8:	e005      	b.n	80024d6 <HAL_RCC_OscConfig+0x296>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f001 f921 	bl	8003710 <HAL_GetTick>
 80024ce:	1b40      	subs	r0, r0, r5
 80024d0:	2802      	cmp	r0, #2
 80024d2:	f200 8192 	bhi.w	80027fa <HAL_RCC_OscConfig+0x5ba>
 80024d6:	2302      	movs	r3, #2
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	fa93 f2a3 	rbit	r2, r3
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e0:	4a0e      	ldr	r2, [pc, #56]	; (800251c <HAL_RCC_OscConfig+0x2dc>)
 80024e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	f013 0f01 	tst.w	r3, #1
 80024f8:	d0e7      	beq.n	80024ca <HAL_RCC_OscConfig+0x28a>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f001 f90e 	bl	800371c <HAL_Delay>
 8002500:	e028      	b.n	8002554 <HAL_RCC_OscConfig+0x314>
 8002502:	2301      	movs	r3, #1
 8002504:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	2100      	movs	r1, #0
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RCC_OscConfig+0x2e0>)
 8002510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f001 f8fc 	bl	8003710 <HAL_GetTick>
 8002518:	4605      	mov	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251a:	e009      	b.n	8002530 <HAL_RCC_OscConfig+0x2f0>
 800251c:	40021000 	.word	0x40021000
 8002520:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002524:	f001 f8f4 	bl	8003710 <HAL_GetTick>
 8002528:	1b40      	subs	r0, r0, r5
 800252a:	2802      	cmp	r0, #2
 800252c:	f200 8167 	bhi.w	80027fe <HAL_RCC_OscConfig+0x5be>
 8002530:	2302      	movs	r3, #2
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	fa93 f2a3 	rbit	r2, r3
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253a:	4aba      	ldr	r2, [pc, #744]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 800253c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	f013 0f01 	tst.w	r3, #1
 8002552:	d1e7      	bne.n	8002524 <HAL_RCC_OscConfig+0x2e4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	f013 0f04 	tst.w	r3, #4
 800255a:	f000 80a1 	beq.w	80026a0 <HAL_RCC_OscConfig+0x460>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4bb1      	ldr	r3, [pc, #708]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002566:	61da      	str	r2, [r3, #28]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002572:	4aad      	ldr	r2, [pc, #692]	; (8002828 <HAL_RCC_OscConfig+0x5e8>)
 8002574:	6813      	ldr	r3, [r2, #0]
 8002576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257c:	f001 f8c8 	bl	8003710 <HAL_GetTick>
 8002580:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002582:	e005      	b.n	8002590 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f001 f8c4 	bl	8003710 <HAL_GetTick>
 8002588:	1b40      	subs	r0, r0, r5
 800258a:	2864      	cmp	r0, #100	; 0x64
 800258c:	f200 8139 	bhi.w	8002802 <HAL_RCC_OscConfig+0x5c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002590:	4ba5      	ldr	r3, [pc, #660]	; (8002828 <HAL_RCC_OscConfig+0x5e8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002598:	d0f4      	beq.n	8002584 <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259a:	68e3      	ldr	r3, [r4, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCC_OscConfig+0x36c>
 80025a0:	4aa0      	ldr	r2, [pc, #640]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 80025a2:	6a13      	ldr	r3, [r2, #32]
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	e022      	b.n	80025f2 <HAL_RCC_OscConfig+0x3b2>
 80025ac:	b963      	cbnz	r3, 80025c8 <HAL_RCC_OscConfig+0x388>
 80025ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	621a      	str	r2, [r3, #32]
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	f022 0204 	bic.w	r2, r2, #4
 80025c4:	621a      	str	r2, [r3, #32]
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x3b2>
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d109      	bne.n	80025e0 <HAL_RCC_OscConfig+0x3a0>
 80025cc:	4b95      	ldr	r3, [pc, #596]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 80025ce:	6a1a      	ldr	r2, [r3, #32]
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	621a      	str	r2, [r3, #32]
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	621a      	str	r2, [r3, #32]
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3b2>
 80025e0:	4b90      	ldr	r3, [pc, #576]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 80025e2:	6a1a      	ldr	r2, [r3, #32]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	621a      	str	r2, [r3, #32]
 80025ea:	6a1a      	ldr	r2, [r3, #32]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f2:	68e3      	ldr	r3, [r4, #12]
 80025f4:	b353      	cbz	r3, 800264c <HAL_RCC_OscConfig+0x40c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f001 f88b 	bl	8003710 <HAL_GetTick>
 80025fa:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	e007      	b.n	800260e <HAL_RCC_OscConfig+0x3ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f001 f887 	bl	8003710 <HAL_GetTick>
 8002602:	1b40      	subs	r0, r0, r5
 8002604:	f241 3388 	movw	r3, #5000	; 0x1388
 8002608:	4298      	cmp	r0, r3
 800260a:	f200 80fc 	bhi.w	8002806 <HAL_RCC_OscConfig+0x5c6>
 800260e:	2302      	movs	r3, #2
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x3ee>
 8002628:	4b7e      	ldr	r3, [pc, #504]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	e001      	b.n	8002632 <HAL_RCC_OscConfig+0x3f2>
 800262e:	4b7d      	ldr	r3, [pc, #500]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 8002630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002632:	2302      	movs	r3, #2
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	f013 0f01 	tst.w	r3, #1
 8002648:	d0d9      	beq.n	80025fe <HAL_RCC_OscConfig+0x3be>
 800264a:	e029      	b.n	80026a0 <HAL_RCC_OscConfig+0x460>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f001 f860 	bl	8003710 <HAL_GetTick>
 8002650:	4605      	mov	r5, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	e007      	b.n	8002664 <HAL_RCC_OscConfig+0x424>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f001 f85c 	bl	8003710 <HAL_GetTick>
 8002658:	1b40      	subs	r0, r0, r5
 800265a:	f241 3388 	movw	r3, #5000	; 0x1388
 800265e:	4298      	cmp	r0, r3
 8002660:	f200 80d3 	bhi.w	800280a <HAL_RCC_OscConfig+0x5ca>
 8002664:	2302      	movs	r3, #2
 8002666:	fa93 f2a3 	rbit	r2, r3
 800266a:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0x444>
 800267e:	4b69      	ldr	r3, [pc, #420]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	e001      	b.n	8002688 <HAL_RCC_OscConfig+0x448>
 8002684:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 8002686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002688:	2302      	movs	r3, #2
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	f013 0f01 	tst.w	r3, #1
 800269e:	d1d9      	bne.n	8002654 <HAL_RCC_OscConfig+0x414>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a0:	69e3      	ldr	r3, [r4, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80b3 	beq.w	800280e <HAL_RCC_OscConfig+0x5ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4a5e      	ldr	r2, [pc, #376]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 80026aa:	6852      	ldr	r2, [r2, #4]
 80026ac:	f002 020c 	and.w	r2, r2, #12
 80026b0:	2a08      	cmp	r2, #8
 80026b2:	f000 80ae 	beq.w	8002812 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d168      	bne.n	800278c <HAL_RCC_OscConfig+0x54c>
 80026ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026be:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80026cc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f001 f81c 	bl	8003710 <HAL_GetTick>
 80026d8:	4605      	mov	r5, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	e005      	b.n	80026e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f001 f818 	bl	8003710 <HAL_GetTick>
 80026e0:	1b40      	subs	r0, r0, r5
 80026e2:	2802      	cmp	r0, #2
 80026e4:	f200 8097 	bhi.w	8002816 <HAL_RCC_OscConfig+0x5d6>
 80026e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ec:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
 8002708:	f013 0f01 	tst.w	r3, #1
 800270c:	d1e6      	bne.n	80026dc <HAL_RCC_OscConfig+0x49c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800270e:	6a23      	ldr	r3, [r4, #32]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x4e4>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002716:	4943      	ldr	r1, [pc, #268]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 8002718:	684b      	ldr	r3, [r1, #4]
 800271a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800271e:	68a3      	ldr	r3, [r4, #8]
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002724:	483f      	ldr	r0, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 8002726:	6843      	ldr	r3, [r0, #4]
 8002728:	f423 1174 	bic.w	r1, r3, #3997696	; 0x3d0000
 800272c:	6a23      	ldr	r3, [r4, #32]
 800272e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002730:	4313      	orrs	r3, r2
 8002732:	430b      	orrs	r3, r1
 8002734:	6043      	str	r3, [r0, #4]
 8002736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800273a:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002748:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f000 ffde 	bl	8003710 <HAL_GetTick>
 8002754:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002756:	e004      	b.n	8002762 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002758:	f000 ffda 	bl	8003710 <HAL_GetTick>
 800275c:	1b00      	subs	r0, r0, r4
 800275e:	2802      	cmp	r0, #2
 8002760:	d85b      	bhi.n	800281a <HAL_RCC_OscConfig+0x5da>
 8002762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002766:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276a:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	f013 0f01 	tst.w	r3, #1
 8002786:	d0e7      	beq.n	8002758 <HAL_RCC_OscConfig+0x518>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002788:	2000      	movs	r0, #0
 800278a:	e049      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
 800278c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002790:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800279e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f000 ffb3 	bl	8003710 <HAL_GetTick>
 80027aa:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ac:	e004      	b.n	80027b8 <HAL_RCC_OscConfig+0x578>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ae:	f000 ffaf 	bl	8003710 <HAL_GetTick>
 80027b2:	1b00      	subs	r0, r0, r4
 80027b4:	2802      	cmp	r0, #2
 80027b6:	d832      	bhi.n	800281e <HAL_RCC_OscConfig+0x5de>
 80027b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027bc:	fa93 f3a3 	rbit	r3, r3
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <HAL_RCC_OscConfig+0x5e4>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	f013 0f01 	tst.w	r3, #1
 80027dc:	d1e7      	bne.n	80027ae <HAL_RCC_OscConfig+0x56e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80027de:	2000      	movs	r0, #0
 80027e0:	e01e      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 80027e2:	2001      	movs	r0, #1
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80027e6:	2003      	movs	r0, #3
 80027e8:	e01a      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80027ea:	2003      	movs	r0, #3
 80027ec:	e018      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	e016      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80027f2:	2003      	movs	r0, #3
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80027f6:	2003      	movs	r0, #3
 80027f8:	e012      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80027fa:	2003      	movs	r0, #3
 80027fc:	e010      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80027fe:	2003      	movs	r0, #3
 8002800:	e00e      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>

    while((PWR->CR & PWR_CR_DBP) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002802:	2003      	movs	r0, #3
 8002804:	e00c      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002806:	2003      	movs	r0, #3
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800280a:	2003      	movs	r0, #3
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800280e:	2000      	movs	r0, #0
 8002810:	e006      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002812:	2001      	movs	r0, #1
 8002814:	e004      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8002816:	2003      	movs	r0, #3
 8002818:	e002      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800281a:	2003      	movs	r0, #3
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800281e:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8002820:	b003      	add	sp, #12
 8002822:	bd30      	pop	{r4, r5, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000

0800282c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	b430      	push	{r4, r5}
 800282e:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002830:	4d1f      	ldr	r5, [pc, #124]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x84>)
 8002832:	ac02      	add	r4, sp, #8
 8002834:	6828      	ldr	r0, [r5, #0]
 8002836:	6869      	ldr	r1, [r5, #4]
 8002838:	68aa      	ldr	r2, [r5, #8]
 800283a:	68eb      	ldr	r3, [r5, #12]
 800283c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800283e:	8a2b      	ldrh	r3, [r5, #16]
 8002840:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002846:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002848:	f003 020c 	and.w	r2, r3, #12
 800284c:	2a08      	cmp	r2, #8
 800284e:	d12a      	bne.n	80028a6 <HAL_RCC_GetSysClockFreq+0x7a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002850:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002854:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	fab2 f282 	clz	r2, r2
 8002860:	fa21 f202 	lsr.w	r2, r1, r2
 8002864:	a906      	add	r1, sp, #24
 8002866:	440a      	add	r2, r1
 8002868:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800286c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002870:	d015      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x72>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800287a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	fa21 f303 	lsr.w	r3, r1, r3
 800288a:	a906      	add	r1, sp, #24
 800288c:	440b      	add	r3, r1
 800288e:	f813 0c14 	ldrb.w	r0, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002894:	fbb3 f0f0 	udiv	r0, r3, r0
 8002898:	fb00 f002 	mul.w	r0, r0, r2
 800289c:	e004      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x7c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800289e:	4807      	ldr	r0, [pc, #28]	; (80028bc <HAL_RCC_GetSysClockFreq+0x90>)
 80028a0:	fb00 f002 	mul.w	r0, r0, r2
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a6:	4804      	ldr	r0, [pc, #16]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028a8:	b006      	add	sp, #24
 80028aa:	bc30      	pop	{r4, r5}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	08003bd4 	.word	0x08003bd4
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b570      	push	{r4, r5, r6, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028c2:	4b74      	ldr	r3, [pc, #464]	; (8002a94 <HAL_RCC_ClockConfig+0x1d4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	428b      	cmp	r3, r1
 80028cc:	d20b      	bcs.n	80028e6 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4a71      	ldr	r2, [pc, #452]	; (8002a94 <HAL_RCC_ClockConfig+0x1d4>)
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	f023 0307 	bic.w	r3, r3, #7
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028da:	6813      	ldr	r3, [r2, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4299      	cmp	r1, r3
 80028e2:	f040 80c6 	bne.w	8002a72 <HAL_RCC_ClockConfig+0x1b2>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	f013 0f02 	tst.w	r3, #2
 80028ec:	d006      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ee:	4c6a      	ldr	r4, [pc, #424]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 80028f0:	6863      	ldr	r3, [r4, #4]
 80028f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f6:	6883      	ldr	r3, [r0, #8]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	6063      	str	r3, [r4, #4]
 80028fc:	460d      	mov	r5, r1
 80028fe:	4604      	mov	r4, r0
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002900:	6803      	ldr	r3, [r0, #0]
 8002902:	f013 0f01 	tst.w	r3, #1
 8002906:	d075      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x134>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002908:	6842      	ldr	r2, [r0, #4]
 800290a:	2a01      	cmp	r2, #1
 800290c:	d113      	bne.n	8002936 <HAL_RCC_ClockConfig+0x76>
 800290e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002912:	fa93 f3a3 	rbit	r3, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b60      	ldr	r3, [pc, #384]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	fa21 f303 	lsr.w	r3, r1, r3
 800292e:	f013 0f01 	tst.w	r3, #1
 8002932:	d127      	bne.n	8002984 <HAL_RCC_ClockConfig+0xc4>
 8002934:	e09f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002936:	2a02      	cmp	r2, #2
 8002938:	d113      	bne.n	8002962 <HAL_RCC_ClockConfig+0xa2>
 800293a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293e:	fa93 f3a3 	rbit	r3, r3
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	f013 0f01 	tst.w	r3, #1
 800295e:	d111      	bne.n	8002984 <HAL_RCC_ClockConfig+0xc4>
 8002960:	e08b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ba>
 8002962:	2302      	movs	r3, #2
 8002964:	fa93 f3a3 	rbit	r3, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	2302      	movs	r3, #2
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	fa21 f303 	lsr.w	r3, r1, r3
 800297e:	f013 0f01 	tst.w	r3, #1
 8002982:	d07c      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002984:	4944      	ldr	r1, [pc, #272]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 8002986:	684b      	ldr	r3, [r1, #4]
 8002988:	f023 0303 	bic.w	r3, r3, #3
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f000 febe 	bl	8003710 <HAL_GetTick>
 8002994:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	6863      	ldr	r3, [r4, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10e      	bne.n	80029ba <HAL_RCC_ClockConfig+0xfa>
 800299c:	e006      	b.n	80029ac <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299e:	f000 feb7 	bl	8003710 <HAL_GetTick>
 80029a2:	1b80      	subs	r0, r0, r6
 80029a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80029a8:	4298      	cmp	r0, r3
 80029aa:	d86a      	bhi.n	8002a82 <HAL_RCC_ClockConfig+0x1c2>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ac:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d1f2      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
 80029b8:	e01c      	b.n	80029f4 <HAL_RCC_ClockConfig+0x134>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d115      	bne.n	80029ea <HAL_RCC_ClockConfig+0x12a>
 80029be:	e006      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f000 fea6 	bl	8003710 <HAL_GetTick>
 80029c4:	1b80      	subs	r0, r0, r6
 80029c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80029ca:	4298      	cmp	r0, r3
 80029cc:	d85b      	bhi.n	8002a86 <HAL_RCC_ClockConfig+0x1c6>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d1f2      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x100>
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_ClockConfig+0x134>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f000 fe98 	bl	8003710 <HAL_GetTick>
 80029e0:	1b80      	subs	r0, r0, r6
 80029e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80029e6:	4298      	cmp	r0, r3
 80029e8:	d84f      	bhi.n	8002a8a <HAL_RCC_ClockConfig+0x1ca>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f013 0f0c 	tst.w	r3, #12
 80029f2:	d1f3      	bne.n	80029dc <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x1d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	429d      	cmp	r5, r3
 80029fe:	d20a      	bcs.n	8002a16 <HAL_RCC_ClockConfig+0x156>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1d4>)
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	f023 0307 	bic.w	r3, r3, #7
 8002a08:	432b      	orrs	r3, r5
 8002a0a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	429d      	cmp	r5, r3
 8002a14:	d13b      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x1ce>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	f013 0f04 	tst.w	r3, #4
 8002a1c:	d006      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1e:	491e      	ldr	r1, [pc, #120]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 8002a20:	684b      	ldr	r3, [r1, #4]
 8002a22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a26:	68e3      	ldr	r3, [r4, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	f013 0f08 	tst.w	r3, #8
 8002a32:	d007      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 8002a36:	6853      	ldr	r3, [r2, #4]
 8002a38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a3c:	6921      	ldr	r1, [r4, #16]
 8002a3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a42:	6053      	str	r3, [r2, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a44:	f7ff fef2 	bl	800282c <HAL_RCC_GetSysClockFreq>
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_ClockConfig+0x1d8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a50:	23f0      	movs	r3, #240	; 0xf0
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_RCC_ClockConfig+0x1dc>)
 8002a60:	5cd3      	ldrb	r3, [r2, r3]
 8002a62:	40d8      	lsrs	r0, r3
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1e0>)
 8002a66:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f000 fe23 	bl	80036b4 <HAL_InitTick>
  
  return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8002a76:	2001      	movs	r0, #1
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002a82:	2003      	movs	r0, #3
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002a86:	2003      	movs	r0, #3
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8002a8a:	2003      	movs	r0, #3
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8002a90:	bd70      	pop	{r4, r5, r6, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08003c40 	.word	0x08003c40
 8002aa0:	20001158 	.word	0x20001158

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002aa4:	4b01      	ldr	r3, [pc, #4]	; (8002aac <HAL_RCC_GetHCLKFreq+0x8>)
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20001158 	.word	0x20001158

08002ab0 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8002ab0:	b410      	push	{r4}
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8002ab2:	f001 0480 	and.w	r4, r1, #128	; 0x80
 8002ab6:	b2a4      	uxth	r4, r4
 8002ab8:	b12c      	cbz	r4, 8002ac6 <HAL_PCDEx_PMAConfig+0x16>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002aba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002abe:	0149      	lsls	r1, r1, #5
 8002ac0:	3128      	adds	r1, #40	; 0x28
 8002ac2:	4401      	add	r1, r0
 8002ac4:	e003      	b.n	8002ace <HAL_PCDEx_PMAConfig+0x1e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ac6:	0149      	lsls	r1, r1, #5
 8002ac8:	f501 7102 	add.w	r1, r1, #520	; 0x208
 8002acc:	4401      	add	r1, r0
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ace:	b912      	cbnz	r2, 8002ad6 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8002ad0:	728a      	strb	r2, [r1, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002ad2:	808b      	strh	r3, [r1, #4]
 8002ad4:	e004      	b.n	8002ae0 <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8002ada:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	bc10      	pop	{r4}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d067      	beq.n	8002bbc <HAL_PCD_Init+0xd4>
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8002af2:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8002af6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002afa:	d104      	bne.n	8002b06 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b02:	f7fd fb85 	bl	8000210 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b06:	2303      	movs	r3, #3
 8002b08:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b0c:	6820      	ldr	r0, [r4, #0]
 8002b0e:	f7fe fbf1 	bl	80012f4 <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002b12:	4625      	mov	r5, r4
 8002b14:	f855 7b10 	ldr.w	r7, [r5], #16
 8002b18:	466e      	mov	r6, sp
 8002b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	6033      	str	r3, [r6, #0]
 8002b22:	1d23      	adds	r3, r4, #4
 8002b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b26:	4638      	mov	r0, r7
 8002b28:	f7fe fbd2 	bl	80012d0 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	6820      	ldr	r0, [r4, #0]
 8002b30:	f7fe fbea 	bl	8001308 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	e010      	b.n	8002b5a <HAL_PCD_Init+0x72>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8002b38:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 8002b42:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002b46:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8002b48:	2100      	movs	r1, #0
 8002b4a:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0;
 8002b4e:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0;
 8002b50:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0;
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	0152      	lsls	r2, r2, #5
 8002b56:	50a1      	str	r1, [r4, r2]
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8002b58:	3301      	adds	r3, #1
 8002b5a:	2b0e      	cmp	r3, #14
 8002b5c:	d9ec      	bls.n	8002b38 <HAL_PCD_Init+0x50>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e012      	b.n	8002b88 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8002b62:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002b66:	2100      	movs	r1, #0
 8002b68:	f882 1209 	strb.w	r1, [r2, #521]	; 0x209
    hpcd->OUT_ep[index].num = index;
 8002b6c:	f882 3208 	strb.w	r3, [r2, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002b70:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8002b72:	f882 120b 	strb.w	r1, [r2, #523]	; 0x20b
    hpcd->OUT_ep[index].maxpacket = 0;
 8002b76:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
    hpcd->OUT_ep[index].xfer_buff = 0;
 8002b7a:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_len = 0;
 8002b7e:	f103 0211 	add.w	r2, r3, #17
 8002b82:	0152      	lsls	r2, r2, #5
 8002b84:	50a1      	str	r1, [r4, r2]
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
 8002b86:	3301      	adds	r3, #1
 8002b88:	2b0e      	cmp	r3, #14
 8002b8a:	d9ea      	bls.n	8002b62 <HAL_PCD_Init+0x7a>
    hpcd->OUT_ep[index].xfer_buff = 0;
    hpcd->OUT_ep[index].xfer_len = 0;
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b8c:	4625      	mov	r5, r4
 8002b8e:	f855 7b10 	ldr.w	r7, [r5], #16
 8002b92:	466e      	mov	r6, sp
 8002b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	6033      	str	r3, [r6, #0]
 8002b9c:	1d23      	adds	r3, r4, #4
 8002b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	f7fe fbb3 	bl	800130c <USB_DevInit>
  
  hpcd->USB_Address = 0;
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	f7fe fed0 	bl	8001958 <USB_DevDisconnect>
  return HAL_OK;
 8002bb8:	4628      	mov	r0, r5
 8002bba:	e001      	b.n	8002bc0 <HAL_PCD_Init+0xd8>
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	4770      	bx	lr
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
  
  USB_DevDisconnect (hpcd->Instance);  
  return HAL_OK;
}
 8002bc0:	b007      	add	sp, #28
 8002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bc4 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8002bc4:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d010      	beq.n	8002bee <HAL_PCD_Start+0x2a>
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8002bd6:	f7fd fc25 	bl	8000424 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	f7fe feba 	bl	8001954 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	f7fe fb7d 	bl	80012e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8002bec:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8002bee:	2002      	movs	r0, #2
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002bf4:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d00d      	beq.n	8002c18 <HAL_PCD_SetAddress+0x24>
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002c00:	2301      	movs	r3, #1
 8002c02:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 8002c06:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8002c0a:	6800      	ldr	r0, [r0, #0]
 8002c0c:	f7fe fe9c 	bl	8001948 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8002c16:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002c18:	2002      	movs	r0, #2
 8002c1a:	4770      	bx	lr

08002c1c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c1c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8002c1e:	b24d      	sxtb	r5, r1
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	da05      	bge.n	8002c30 <HAL_PCD_EP_Open+0x14>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002c24:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002c28:	0164      	lsls	r4, r4, #5
 8002c2a:	3428      	adds	r4, #40	; 0x28
 8002c2c:	4404      	add	r4, r0
 8002c2e:	e005      	b.n	8002c3c <HAL_PCD_EP_Open+0x20>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002c30:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002c34:	0164      	lsls	r4, r4, #5
 8002c36:	f504 7402 	add.w	r4, r4, #520	; 0x208
 8002c3a:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
 8002c3c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002c40:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002c42:	0fed      	lsrs	r5, r5, #31
 8002c44:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8002c46:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8002c48:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 8002c4a:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d00b      	beq.n	8002c6a <HAL_PCD_EP_Open+0x4e>
 8002c52:	4605      	mov	r5, r0
 8002c54:	2301      	movs	r3, #1
 8002c56:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f7fe fb69 	bl	8001334 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f885 03e8 	strb.w	r0, [r5, #1000]	; 0x3e8
  return ret;
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
    
  __HAL_LOCK(hpcd);
 8002c6a:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);
  return ret;
}
 8002c6c:	bd38      	pop	{r3, r4, r5, pc}
 8002c6e:	bf00      	nop

08002c70 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8002c70:	b24a      	sxtb	r2, r1
 8002c72:	2a00      	cmp	r2, #0
 8002c74:	da05      	bge.n	8002c82 <HAL_PCD_EP_Close+0x12>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002c76:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002c7a:	015b      	lsls	r3, r3, #5
 8002c7c:	3328      	adds	r3, #40	; 0x28
 8002c7e:	4403      	add	r3, r0
 8002c80:	e005      	b.n	8002c8e <HAL_PCD_EP_Close+0x1e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002c82:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002c86:	015b      	lsls	r3, r3, #5
 8002c88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c8c:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7F;
 8002c8e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002c92:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002c94:	0fd2      	lsrs	r2, r2, #31
 8002c96:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8002c98:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 8002c9c:	2a01      	cmp	r2, #1
 8002c9e:	d00c      	beq.n	8002cba <HAL_PCD_EP_Close+0x4a>
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	4604      	mov	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002caa:	4619      	mov	r1, r3
 8002cac:	6800      	ldr	r0, [r0, #0]
 8002cae:	f7fe fcdf 	bl	8001670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 8002cb8:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd);
 8002cba:	2002      	movs	r0, #2
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002cc6:	016c      	lsls	r4, r5, #5
 8002cc8:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8002ccc:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002cce:	4404      	add	r4, r0
 8002cd0:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
  ep->xfer_len = len;
 8002cd4:	f105 0211 	add.w	r2, r5, #17
 8002cd8:	0152      	lsls	r2, r2, #5
 8002cda:	1886      	adds	r6, r0, r2
 8002cdc:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6073      	str	r3, [r6, #4]
  ep->is_in = 0;
 8002ce2:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 8002ce6:	f884 5208 	strb.w	r5, [r4, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 8002cea:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d00f      	beq.n	8002d12 <HAL_PCD_EP_Receive+0x52>
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
 8002cfa:	b91d      	cbnz	r5, 8002d04 <HAL_PCD_EP_Receive+0x44>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002cfc:	6800      	ldr	r0, [r0, #0]
 8002cfe:	f7fe fe47 	bl	8001990 <USB_EPStartXfer>
 8002d02:	e002      	b.n	8002d0a <HAL_PCD_EP_Receive+0x4a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002d04:	6800      	ldr	r0, [r0, #0]
 8002d06:	f7fe fe43 	bl	8001990 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8002d12:	2002      	movs	r0, #2
    USB_EPStartXfer(hpcd->Instance , ep);
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	bf00      	nop

08002d18 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8002d18:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002d1c:	3111      	adds	r1, #17
 8002d1e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 8002d22:	8880      	ldrh	r0, [r0, #4]
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop

08002d28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002d2e:	016c      	lsls	r4, r5, #5
 8002d30:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002d34:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002d36:	4404      	add	r4, r0
 8002d38:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8002d3a:	1caa      	adds	r2, r5, #2
 8002d3c:	0152      	lsls	r2, r2, #5
 8002d3e:	1886      	adds	r6, r0, r2
 8002d40:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	6073      	str	r3, [r6, #4]
  ep->is_in = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8002d4c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 8002d50:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d00f      	beq.n	8002d78 <HAL_PCD_EP_Transmit+0x50>
 8002d58:	4604      	mov	r4, r0
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
 8002d60:	b91d      	cbnz	r5, 8002d6a <HAL_PCD_EP_Transmit+0x42>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002d62:	6800      	ldr	r0, [r0, #0]
 8002d64:	f7fe fe14 	bl	8001990 <USB_EPStartXfer>
 8002d68:	e002      	b.n	8002d70 <HAL_PCD_EP_Transmit+0x48>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002d6a:	6800      	ldr	r0, [r0, #0]
 8002d6c:	f7fe fe10 	bl	8001990 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8002d78:	2002      	movs	r0, #2
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
}
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}

08002d7c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	4605      	mov	r5, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 8002d88:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002d8c:	e216      	b.n	80031bc <PCD_EP_ISR_Handler+0x440>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d8e:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    
    if (epindex == 0)
 8002d92:	f014 040f 	ands.w	r4, r4, #15
 8002d96:	f040 80c8 	bne.w	8002f2a <PCD_EP_ISR_Handler+0x1ae>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002d9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	bb9b      	cbnz	r3, 8002e0e <PCD_EP_ISR_Handler+0x92>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002da6:	8803      	ldrh	r3, [r0, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002db6:	6829      	ldr	r1, [r5, #0]
 8002db8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002dc2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002dcc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd4:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002dd6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002dd8:	4413      	add	r3, r2
 8002dda:	63eb      	str	r3, [r5, #60]	; 0x3c
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4628      	mov	r0, r5
 8002de0:	f7fd fa48 	bl	8000274 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8002de4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002de8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002dec:	f000 81e6 	beq.w	80031bc <PCD_EP_ISR_Handler+0x440>
 8002df0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 81e2 	bne.w	80031bc <PCD_EP_ISR_Handler+0x440>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002df8:	682a      	ldr	r2, [r5, #0]
 8002dfa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8002e0c:	e1d6      	b.n	80031bc <PCD_EP_ISR_Handler+0x440>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e0e:	8803      	ldrh	r3, [r0, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8002e16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	b303      	cbz	r3, 8002e64 <PCD_EP_ISR_Handler+0xe8>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f895 2208 	ldrb.w	r2, [r5, #520]	; 0x208
 8002e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e30:	3306      	adds	r3, #6
 8002e32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002e36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3e:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002e42:	f8b5 220c 	ldrh.w	r2, [r5, #524]	; 0x20c
 8002e46:	f505 717b 	add.w	r1, r5, #1004	; 0x3ec
 8002e4a:	f7fe ff15 	bl	8001c78 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002e4e:	682a      	ldr	r2, [r5, #0]
 8002e50:	8813      	ldrh	r3, [r2, #0]
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	051b      	lsls	r3, r3, #20
 8002e58:	0d1b      	lsrs	r3, r3, #20
 8002e5a:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f7fd f9f7 	bl	8000250 <HAL_PCD_SetupStageCallback>
 8002e62:	e1ab      	b.n	80031bc <PCD_EP_ISR_Handler+0x440>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002e64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002e68:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e6c:	f000 81a6 	beq.w	80031bc <PCD_EP_ISR_Handler+0x440>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e70:	8803      	ldrh	r3, [r0, #0]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	051b      	lsls	r3, r3, #20
 8002e78:	0d1b      	lsrs	r3, r3, #20
 8002e7a:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e7c:	6828      	ldr	r0, [r5, #0]
 8002e7e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f895 2208 	ldrb.w	r2, [r5, #520]	; 0x208
 8002e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e8c:	3306      	adds	r3, #6
 8002e8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002e92:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9a:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
          
          if (ep->xfer_count != 0)
 8002e9e:	b163      	cbz	r3, 8002eba <PCD_EP_ISR_Handler+0x13e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002ea0:	f8b5 220c 	ldrh.w	r2, [r5, #524]	; 0x20c
 8002ea4:	f8d5 121c 	ldr.w	r1, [r5, #540]	; 0x21c
 8002ea8:	f7fe fee6 	bl	8001c78 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002eac:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8002eb0:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f7fd f9cf 	bl	8000260 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ec2:	682a      	ldr	r2, [r5, #0]
 8002ec4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3306      	adds	r3, #6
 8002ecc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002ed0:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8002ed4:	293e      	cmp	r1, #62	; 0x3e
 8002ed6:	d90e      	bls.n	8002ef6 <PCD_EP_ISR_Handler+0x17a>
 8002ed8:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8002edc:	f011 0f1f 	tst.w	r1, #31
 8002ee0:	d101      	bne.n	8002ee6 <PCD_EP_ISR_Handler+0x16a>
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002eea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002ef4:	e00a      	b.n	8002f0c <PCD_EP_ISR_Handler+0x190>
 8002ef6:	f3c1 024f 	ubfx	r2, r1, #1, #16
 8002efa:	f011 0f01 	tst.w	r1, #1
 8002efe:	d001      	beq.n	8002f04 <PCD_EP_ISR_Handler+0x188>
 8002f00:	3201      	adds	r2, #1
 8002f02:	b292      	uxth	r2, r2
 8002f04:	0292      	lsls	r2, r2, #10
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f0c:	682a      	ldr	r2, [r5, #0]
 8002f0e:	8813      	ldrh	r3, [r2, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f26:	8013      	strh	r3, [r2, #0]
 8002f28:	e148      	b.n	80031bc <PCD_EP_ISR_Handler+0x440>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f2a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002f34:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002f38:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002f3c:	f000 8096 	beq.w	800306c <PCD_EP_ISR_Handler+0x2f0>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f40:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f48:	051b      	lsls	r3, r3, #20
 8002f4a:	0d1b      	lsrs	r3, r3, #20
 8002f4c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002f50:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8002f54:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8002f58:	b9e3      	cbnz	r3, 8002f94 <PCD_EP_ISR_Handler+0x218>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f5a:	6828      	ldr	r0, [r5, #0]
 8002f5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8002f66:	f892 2208 	ldrb.w	r2, [r2, #520]	; 0x208
 8002f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f6e:	3306      	adds	r3, #6
 8002f70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f74:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8002f78:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8002f7c:	2e00      	cmp	r6, #0
 8002f7e:	d052      	beq.n	8003026 <PCD_EP_ISR_Handler+0x2aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f80:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8002f84:	4633      	mov	r3, r6
 8002f86:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 8002f8a:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8002f8e:	f7fe fe73 	bl	8001c78 <USB_ReadPMA>
 8002f92:	e048      	b.n	8003026 <PCD_EP_ISR_Handler+0x2aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002f94:	6828      	ldr	r0, [r5, #0]
 8002f96:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8002f9a:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8002f9e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b1b3      	cbz	r3, 8002fd8 <PCD_EP_ISR_Handler+0x25c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002faa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002fba:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8002fbe:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002fc2:	b1fe      	cbz	r6, 8003004 <PCD_EP_ISR_Handler+0x288>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fc4:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8002fc8:	4633      	mov	r3, r6
 8002fca:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
 8002fce:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8002fd2:	f7fe fe51 	bl	8001c78 <USB_ReadPMA>
 8002fd6:	e015      	b.n	8003004 <PCD_EP_ISR_Handler+0x288>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fd8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002fe2:	3306      	adds	r3, #6
 8002fe4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002fe8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8002fec:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002ff0:	b146      	cbz	r6, 8003004 <PCD_EP_ISR_Handler+0x288>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ff2:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8002ff6:	4633      	mov	r3, r6
 8002ff8:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 8002ffc:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8003000:	f7fe fe3a 	bl	8001c78 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003004:	682a      	ldr	r2, [r5, #0]
 8003006:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800300a:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 800300e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003016:	051b      	lsls	r3, r3, #20
 8003018:	0d1b      	lsrs	r3, r3, #20
 800301a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003022:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8003026:	f104 0311 	add.w	r3, r4, #17
 800302a:	015b      	lsls	r3, r3, #5
 800302c:	18e9      	adds	r1, r5, r3
 800302e:	684a      	ldr	r2, [r1, #4]
 8003030:	4432      	add	r2, r6
 8003032:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 8003034:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8003038:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
 800303c:	4432      	add	r2, r6
 800303e:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003042:	58eb      	ldr	r3, [r5, r3]
 8003044:	b11b      	cbz	r3, 800304e <PCD_EP_ISR_Handler+0x2d2>
 8003046:	f8d1 1218 	ldr.w	r1, [r1, #536]	; 0x218
 800304a:	428e      	cmp	r6, r1
 800304c:	d207      	bcs.n	800305e <PCD_EP_ISR_Handler+0x2e2>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800304e:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8003052:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8003056:	4628      	mov	r0, r5
 8003058:	f7fd f902 	bl	8000260 <HAL_PCD_DataOutStageCallback>
 800305c:	e006      	b.n	800306c <PCD_EP_ISR_Handler+0x2f0>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800305e:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8003062:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8003066:	4628      	mov	r0, r5
 8003068:	f7ff fe2a 	bl	8002cc0 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800306c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a0 	beq.w	80031bc <PCD_EP_ISR_Handler+0x440>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800307c:	682a      	ldr	r2, [r5, #0]
 800307e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308c:	b29b      	uxth	r3, r3
 800308e:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8003092:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8003096:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800309a:	b9eb      	cbnz	r3, 80030d8 <PCD_EP_ISR_Handler+0x35c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800309c:	6828      	ldr	r0, [r5, #0]
 800309e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 80030a8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80030ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030b0:	3302      	adds	r3, #2
 80030b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80030b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80030ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030be:	1ca2      	adds	r2, r4, #2
 80030c0:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 80030c4:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0)
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d051      	beq.n	800316e <PCD_EP_ISR_Handler+0x3f2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80030ca:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80030ce:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 80030d0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80030d2:	f7fe fc49 	bl	8001968 <USB_WritePMA>
 80030d6:	e04a      	b.n	800316e <PCD_EP_ISR_Handler+0x3f2>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80030d8:	6828      	ldr	r0, [r5, #0]
 80030da:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80030de:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80030e2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b1bb      	cbz	r3, 800311e <PCD_EP_ISR_Handler+0x3a2>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030ee:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80030f2:	b292      	uxth	r2, r2
 80030f4:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 80030f8:	3302      	adds	r3, #2
 80030fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80030fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003106:	1ca2      	adds	r2, r4, #2
 8003108:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 800310c:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0)
 800310e:	b1eb      	cbz	r3, 800314c <PCD_EP_ISR_Handler+0x3d0>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003110:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8003114:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8003116:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003118:	f7fe fc26 	bl	8001968 <USB_WritePMA>
 800311c:	e016      	b.n	800314c <PCD_EP_ISR_Handler+0x3d0>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800311e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003122:	b29b      	uxth	r3, r3
 8003124:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003128:	3306      	adds	r3, #6
 800312a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800312e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003136:	1ca2      	adds	r2, r4, #2
 8003138:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 800313c:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0)
 800313e:	b12b      	cbz	r3, 800314c <PCD_EP_ISR_Handler+0x3d0>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8003140:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8003144:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8003146:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8003148:	f7fe fc0e 	bl	8001968 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800314c:	682a      	ldr	r2, [r5, #0]
 800314e:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8003152:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8003156:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800315a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800315e:	051b      	lsls	r3, r3, #20
 8003160:	0d1b      	lsrs	r3, r3, #20
 8003162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800316e:	6829      	ldr	r1, [r5, #0]
 8003170:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003174:	b29a      	uxth	r2, r3
 8003176:	eb05 1044 	add.w	r0, r5, r4, lsl #5
 800317a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800317e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003182:	3302      	adds	r3, #2
 8003184:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003188:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800318c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003190:	1ca1      	adds	r1, r4, #2
 8003192:	0149      	lsls	r1, r1, #5
 8003194:	186a      	adds	r2, r5, r1
 8003196:	6053      	str	r3, [r2, #4]
        ep->xfer_buff+=ep->xfer_count;
 8003198:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800319a:	441a      	add	r2, r3
 800319c:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800319e:	586b      	ldr	r3, [r5, r1]
 80031a0:	b92b      	cbnz	r3, 80031ae <PCD_EP_ISR_Handler+0x432>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031a2:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80031a6:	4628      	mov	r0, r5
 80031a8:	f7fd f864 	bl	8000274 <HAL_PCD_DataInStageCallback>
 80031ac:	e006      	b.n	80031bc <PCD_EP_ISR_Handler+0x440>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80031ae:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80031b2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7ff fdb6 	bl	8002d28 <HAL_PCD_EP_Transmit>
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
  __IO uint16_t wEPVal = 0;
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80031bc:	6828      	ldr	r0, [r5, #0]
 80031be:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80031c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031cc:	f47f addf 	bne.w	8002d8e <PCD_EP_ISR_Handler+0x12>
        }
      } 
    }
  }
  return HAL_OK;
}
 80031d0:	2000      	movs	r0, #0
 80031d2:	b002      	add	sp, #8
 80031d4:	bd70      	pop	{r4, r5, r6, pc}
 80031d6:	bf00      	nop

080031d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80031dc:	6800      	ldr	r0, [r0, #0]
 80031de:	f7fe fbbd 	bl	800195c <USB_ReadInterrupts>
 80031e2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80031e6:	d002      	beq.n	80031ee <HAL_PCD_IRQHandler+0x16>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff fdc7 	bl	8002d7c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80031ee:	6820      	ldr	r0, [r4, #0]
 80031f0:	f7fe fbb4 	bl	800195c <USB_ReadInterrupts>
 80031f4:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80031f8:	d00f      	beq.n	800321a <HAL_PCD_IRQHandler+0x42>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003200:	b29b      	uxth	r3, r3
 8003202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003206:	b29b      	uxth	r3, r3
 8003208:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800320c:	4620      	mov	r0, r4
 800320e:	f7fd f841 	bl	8000294 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8003212:	2100      	movs	r1, #0
 8003214:	4620      	mov	r0, r4
 8003216:	f7ff fced 	bl	8002bf4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	f7fe fb9e 	bl	800195c <USB_ReadInterrupts>
 8003220:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003224:	d008      	beq.n	8003238 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8003226:	6822      	ldr	r2, [r4, #0]
 8003228:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800322c:	b29b      	uxth	r3, r3
 800322e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003232:	b29b      	uxth	r3, r3
 8003234:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8003238:	6820      	ldr	r0, [r4, #0]
 800323a:	f7fe fb8f 	bl	800195c <USB_ReadInterrupts>
 800323e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8003242:	d008      	beq.n	8003256 <HAL_PCD_IRQHandler+0x7e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800324a:	b29b      	uxth	r3, r3
 800324c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003250:	b29b      	uxth	r3, r3
 8003252:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8003256:	6820      	ldr	r0, [r4, #0]
 8003258:	f7fe fb80 	bl	800195c <USB_ReadInterrupts>
 800325c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003260:	d019      	beq.n	8003296 <HAL_PCD_IRQHandler+0xbe>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003268:	b29b      	uxth	r3, r3
 800326a:	f023 0304 	bic.w	r3, r3, #4
 800326e:	b29b      	uxth	r3, r3
 8003270:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 800327a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 800327e:	4620      	mov	r0, r4
 8003280:	f7fd f824 	bl	80002cc <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003284:	6822      	ldr	r2, [r4, #0]
 8003286:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800328a:	b29b      	uxth	r3, r3
 800328c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003290:	b29b      	uxth	r3, r3
 8003292:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8003296:	6820      	ldr	r0, [r4, #0]
 8003298:	f7fe fb60 	bl	800195c <USB_ReadInterrupts>
 800329c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80032a0:	d021      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x10e>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	f7fe fb41 	bl	800195c <USB_ReadInterrupts>
 80032da:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80032de:	d102      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x10e>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80032e0:	4620      	mov	r0, r4
 80032e2:	f7fc ffe3 	bl	80002ac <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	f7fe fb38 	bl	800195c <USB_ReadInterrupts>
 80032ec:	f410 7f00 	tst.w	r0, #512	; 0x200
 80032f0:	d00b      	beq.n	800330a <HAL_PCD_IRQHandler+0x132>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003304:	4620      	mov	r0, r4
 8003306:	f7fc ffbf 	bl	8000288 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	f7fe fb26 	bl	800195c <USB_ReadInterrupts>
 8003310:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003314:	d008      	beq.n	8003328 <HAL_PCD_IRQHandler+0x150>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800331c:	b29b      	uxth	r3, r3
 800331e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003322:	b29b      	uxth	r3, r3
 8003324:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop

0800332c <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800332c:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 800332e:	b24a      	sxtb	r2, r1
 8003330:	2a00      	cmp	r2, #0
 8003332:	da05      	bge.n	8003340 <HAL_PCD_EP_SetStall+0x14>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003334:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	3328      	adds	r3, #40	; 0x28
 800333c:	4403      	add	r3, r0
 800333e:	e003      	b.n	8003348 <HAL_PCD_EP_SetStall+0x1c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003340:	014b      	lsls	r3, r1, #5
 8003342:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003346:	4403      	add	r3, r0
  }
  
  ep->is_stall = 1;
 8003348:	2401      	movs	r4, #1
 800334a:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800334c:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8003350:	701c      	strb	r4, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003352:	0fd2      	lsrs	r2, r2, #31
 8003354:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8003356:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 800335a:	2a01      	cmp	r2, #1
 800335c:	d011      	beq.n	8003382 <HAL_PCD_EP_SetStall+0x56>
 800335e:	4605      	mov	r5, r0
 8003360:	2201      	movs	r2, #1
 8003362:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8003366:	4619      	mov	r1, r3
 8003368:	6800      	ldr	r0, [r0, #0]
 800336a:	f7fe fa69 	bl	8001840 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800336e:	b924      	cbnz	r4, 800337a <HAL_PCD_EP_SetStall+0x4e>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003370:	f505 717b 	add.w	r1, r5, #1004	; 0x3ec
 8003374:	6828      	ldr	r0, [r5, #0]
 8003376:	f7fe faf5 	bl	8001964 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800337a:	2000      	movs	r0, #0
 800337c:	f885 03e8 	strb.w	r0, [r5, #1000]	; 0x3e8
  
  return HAL_OK;
 8003380:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd);
 8003382:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003384:	bd38      	pop	{r3, r4, r5, pc}
 8003386:	bf00      	nop

08003388 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003388:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep = NULL;
  
  if ((0x80 & ep_addr) == 0x80)
 800338a:	b24a      	sxtb	r2, r1
 800338c:	2a00      	cmp	r2, #0
 800338e:	da05      	bge.n	800339c <HAL_PCD_EP_ClrStall+0x14>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003390:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8003394:	015b      	lsls	r3, r3, #5
 8003396:	3328      	adds	r3, #40	; 0x28
 8003398:	4403      	add	r3, r0
 800339a:	e003      	b.n	80033a4 <HAL_PCD_EP_ClrStall+0x1c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800339c:	014b      	lsls	r3, r1, #5
 800339e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033a2:	4403      	add	r3, r0
  }
  
  ep->is_stall = 0;
 80033a4:	2400      	movs	r4, #0
 80033a6:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80033a8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80033ac:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80033ae:	0fd2      	lsrs	r2, r2, #31
 80033b0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80033b2:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
 80033b6:	2a01      	cmp	r2, #1
 80033b8:	d00b      	beq.n	80033d2 <HAL_PCD_EP_ClrStall+0x4a>
 80033ba:	4604      	mov	r4, r0
 80033bc:	2201      	movs	r2, #1
 80033be:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 80033c2:	4619      	mov	r1, r3
 80033c4:	6800      	ldr	r0, [r0, #0]
 80033c6:	f7fe fa73 	bl	80018b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80033ca:	2000      	movs	r0, #0
 80033cc:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 80033d0:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 80033d2:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80033d4:	bd10      	pop	{r4, pc}
 80033d6:	bf00      	nop

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033da:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80033dc:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80033de:	4634      	mov	r4, r6
 80033e0:	e0d5      	b.n	800358e <HAL_GPIO_Init+0x1b6>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033e2:	2201      	movs	r2, #1
 80033e4:	40a2      	lsls	r2, r4
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e6:	680b      	ldr	r3, [r1, #0]
 80033e8:	4013      	ands	r3, r2

    if (iocurrent == ioposition)
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f040 80ce 	bne.w	800358c <HAL_GPIO_Init+0x1b4>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033f0:	684d      	ldr	r5, [r1, #4]
 80033f2:	2d12      	cmp	r5, #18
 80033f4:	d02d      	beq.n	8003452 <HAL_GPIO_Init+0x7a>
 80033f6:	d80b      	bhi.n	8003410 <HAL_GPIO_Init+0x38>
 80033f8:	2d02      	cmp	r5, #2
 80033fa:	d027      	beq.n	800344c <HAL_GPIO_Init+0x74>
 80033fc:	d803      	bhi.n	8003406 <HAL_GPIO_Init+0x2e>
 80033fe:	b35d      	cbz	r5, 8003458 <HAL_GPIO_Init+0x80>
 8003400:	2d01      	cmp	r5, #1
 8003402:	d01e      	beq.n	8003442 <HAL_GPIO_Init+0x6a>
 8003404:	e035      	b.n	8003472 <HAL_GPIO_Init+0x9a>
 8003406:	2d03      	cmp	r5, #3
 8003408:	d030      	beq.n	800346c <HAL_GPIO_Init+0x94>
 800340a:	2d11      	cmp	r5, #17
 800340c:	d01b      	beq.n	8003446 <HAL_GPIO_Init+0x6e>
 800340e:	e030      	b.n	8003472 <HAL_GPIO_Init+0x9a>
 8003410:	4f61      	ldr	r7, [pc, #388]	; (8003598 <HAL_GPIO_Init+0x1c0>)
 8003412:	42bd      	cmp	r5, r7
 8003414:	d020      	beq.n	8003458 <HAL_GPIO_Init+0x80>
 8003416:	d808      	bhi.n	800342a <HAL_GPIO_Init+0x52>
 8003418:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800341c:	42bd      	cmp	r5, r7
 800341e:	d01b      	beq.n	8003458 <HAL_GPIO_Init+0x80>
 8003420:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003424:	42bd      	cmp	r5, r7
 8003426:	d124      	bne.n	8003472 <HAL_GPIO_Init+0x9a>
 8003428:	e016      	b.n	8003458 <HAL_GPIO_Init+0x80>
 800342a:	4f5c      	ldr	r7, [pc, #368]	; (800359c <HAL_GPIO_Init+0x1c4>)
 800342c:	42bd      	cmp	r5, r7
 800342e:	d013      	beq.n	8003458 <HAL_GPIO_Init+0x80>
 8003430:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003434:	42bd      	cmp	r5, r7
 8003436:	d00f      	beq.n	8003458 <HAL_GPIO_Init+0x80>
 8003438:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800343c:	42bd      	cmp	r5, r7
 800343e:	d118      	bne.n	8003472 <HAL_GPIO_Init+0x9a>
 8003440:	e00a      	b.n	8003458 <HAL_GPIO_Init+0x80>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003442:	68ce      	ldr	r6, [r1, #12]
          break;
 8003444:	e015      	b.n	8003472 <HAL_GPIO_Init+0x9a>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003446:	68ce      	ldr	r6, [r1, #12]
 8003448:	3604      	adds	r6, #4
          break;
 800344a:	e012      	b.n	8003472 <HAL_GPIO_Init+0x9a>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800344c:	68ce      	ldr	r6, [r1, #12]
 800344e:	3608      	adds	r6, #8
          break;
 8003450:	e00f      	b.n	8003472 <HAL_GPIO_Init+0x9a>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003452:	68ce      	ldr	r6, [r1, #12]
 8003454:	360c      	adds	r6, #12
          break;
 8003456:	e00c      	b.n	8003472 <HAL_GPIO_Init+0x9a>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8003458:	688d      	ldr	r5, [r1, #8]
 800345a:	b14d      	cbz	r5, 8003470 <HAL_GPIO_Init+0x98>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800345c:	2d01      	cmp	r5, #1
 800345e:	d102      	bne.n	8003466 <HAL_GPIO_Init+0x8e>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8003460:	6102      	str	r2, [r0, #16]
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003462:	2608      	movs	r6, #8
 8003464:	e005      	b.n	8003472 <HAL_GPIO_Init+0x9a>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003466:	6142      	str	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003468:	2608      	movs	r6, #8
 800346a:	e002      	b.n	8003472 <HAL_GPIO_Init+0x9a>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800346c:	2600      	movs	r6, #0
 800346e:	e000      	b.n	8003472 <HAL_GPIO_Init+0x9a>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003470:	2604      	movs	r6, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003472:	2bff      	cmp	r3, #255	; 0xff
 8003474:	d801      	bhi.n	800347a <HAL_GPIO_Init+0xa2>
 8003476:	4686      	mov	lr, r0
 8003478:	e001      	b.n	800347e <HAL_GPIO_Init+0xa6>
 800347a:	f100 0e04 	add.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800347e:	2bff      	cmp	r3, #255	; 0xff
 8003480:	d801      	bhi.n	8003486 <HAL_GPIO_Init+0xae>
 8003482:	00a2      	lsls	r2, r4, #2
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0xb4>
 8003486:	f1a4 0208 	sub.w	r2, r4, #8
 800348a:	0092      	lsls	r2, r2, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800348c:	f8de 7000 	ldr.w	r7, [lr]
 8003490:	250f      	movs	r5, #15
 8003492:	4095      	lsls	r5, r2
 8003494:	ea27 0505 	bic.w	r5, r7, r5
 8003498:	fa06 f202 	lsl.w	r2, r6, r2
 800349c:	432a      	orrs	r2, r5
 800349e:	f8ce 2000 	str.w	r2, [lr]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80034a2:	684a      	ldr	r2, [r1, #4]
 80034a4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80034a8:	d070      	beq.n	800358c <HAL_GPIO_Init+0x1b4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034aa:	4a3d      	ldr	r2, [pc, #244]	; (80035a0 <HAL_GPIO_Init+0x1c8>)
 80034ac:	6995      	ldr	r5, [r2, #24]
 80034ae:	f045 0501 	orr.w	r5, r5, #1
 80034b2:	6195      	str	r5, [r2, #24]
 80034b4:	6992      	ldr	r2, [r2, #24]
 80034b6:	f002 0201 	and.w	r2, r2, #1
 80034ba:	9201      	str	r2, [sp, #4]
 80034bc:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2];
 80034be:	08a7      	lsrs	r7, r4, #2
 80034c0:	1cbd      	adds	r5, r7, #2
 80034c2:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_GPIO_Init+0x1cc>)
 80034c4:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034c8:	f004 0203 	and.w	r2, r4, #3
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	f04f 0e0f 	mov.w	lr, #15
 80034d2:	fa0e fe02 	lsl.w	lr, lr, r2
 80034d6:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034da:	4d33      	ldr	r5, [pc, #204]	; (80035a8 <HAL_GPIO_Init+0x1d0>)
 80034dc:	42a8      	cmp	r0, r5
 80034de:	d00d      	beq.n	80034fc <HAL_GPIO_Init+0x124>
 80034e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034e4:	42a8      	cmp	r0, r5
 80034e6:	d00b      	beq.n	8003500 <HAL_GPIO_Init+0x128>
 80034e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034ec:	42a8      	cmp	r0, r5
 80034ee:	d009      	beq.n	8003504 <HAL_GPIO_Init+0x12c>
 80034f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034f4:	42a8      	cmp	r0, r5
 80034f6:	d107      	bne.n	8003508 <HAL_GPIO_Init+0x130>
 80034f8:	2503      	movs	r5, #3
 80034fa:	e006      	b.n	800350a <HAL_GPIO_Init+0x132>
 80034fc:	2500      	movs	r5, #0
 80034fe:	e004      	b.n	800350a <HAL_GPIO_Init+0x132>
 8003500:	2501      	movs	r5, #1
 8003502:	e002      	b.n	800350a <HAL_GPIO_Init+0x132>
 8003504:	2502      	movs	r5, #2
 8003506:	e000      	b.n	800350a <HAL_GPIO_Init+0x132>
 8003508:	2504      	movs	r5, #4
 800350a:	fa05 f202 	lsl.w	r2, r5, r2
 800350e:	ea4e 0202 	orr.w	r2, lr, r2
        AFIO->EXTICR[position >> 2] = temp;
 8003512:	3702      	adds	r7, #2
 8003514:	4d23      	ldr	r5, [pc, #140]	; (80035a4 <HAL_GPIO_Init+0x1cc>)
 8003516:	f845 2027 	str.w	r2, [r5, r7, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800351a:	684a      	ldr	r2, [r1, #4]
 800351c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003520:	d005      	beq.n	800352e <HAL_GPIO_Init+0x156>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8003522:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003526:	682a      	ldr	r2, [r5, #0]
 8003528:	431a      	orrs	r2, r3
 800352a:	602a      	str	r2, [r5, #0]
 800352c:	e004      	b.n	8003538 <HAL_GPIO_Init+0x160>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800352e:	4d1f      	ldr	r5, [pc, #124]	; (80035ac <HAL_GPIO_Init+0x1d4>)
 8003530:	682a      	ldr	r2, [r5, #0]
 8003532:	ea22 0203 	bic.w	r2, r2, r3
 8003536:	602a      	str	r2, [r5, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003538:	684a      	ldr	r2, [r1, #4]
 800353a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800353e:	d004      	beq.n	800354a <HAL_GPIO_Init+0x172>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8003540:	4d1a      	ldr	r5, [pc, #104]	; (80035ac <HAL_GPIO_Init+0x1d4>)
 8003542:	686a      	ldr	r2, [r5, #4]
 8003544:	431a      	orrs	r2, r3
 8003546:	606a      	str	r2, [r5, #4]
 8003548:	e004      	b.n	8003554 <HAL_GPIO_Init+0x17c>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800354a:	4d18      	ldr	r5, [pc, #96]	; (80035ac <HAL_GPIO_Init+0x1d4>)
 800354c:	686a      	ldr	r2, [r5, #4]
 800354e:	ea22 0203 	bic.w	r2, r2, r3
 8003552:	606a      	str	r2, [r5, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003554:	684a      	ldr	r2, [r1, #4]
 8003556:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800355a:	d004      	beq.n	8003566 <HAL_GPIO_Init+0x18e>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800355c:	4d13      	ldr	r5, [pc, #76]	; (80035ac <HAL_GPIO_Init+0x1d4>)
 800355e:	68aa      	ldr	r2, [r5, #8]
 8003560:	431a      	orrs	r2, r3
 8003562:	60aa      	str	r2, [r5, #8]
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x198>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8003566:	4d11      	ldr	r5, [pc, #68]	; (80035ac <HAL_GPIO_Init+0x1d4>)
 8003568:	68aa      	ldr	r2, [r5, #8]
 800356a:	ea22 0203 	bic.w	r2, r2, r3
 800356e:	60aa      	str	r2, [r5, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003570:	684a      	ldr	r2, [r1, #4]
 8003572:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8003576:	d004      	beq.n	8003582 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8003578:	4d0c      	ldr	r5, [pc, #48]	; (80035ac <HAL_GPIO_Init+0x1d4>)
 800357a:	68ea      	ldr	r2, [r5, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60eb      	str	r3, [r5, #12]
 8003580:	e004      	b.n	800358c <HAL_GPIO_Init+0x1b4>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8003582:	4d0a      	ldr	r5, [pc, #40]	; (80035ac <HAL_GPIO_Init+0x1d4>)
 8003584:	68ea      	ldr	r2, [r5, #12]
 8003586:	ea22 0303 	bic.w	r3, r2, r3
 800358a:	60eb      	str	r3, [r5, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800358c:	3401      	adds	r4, #1
 800358e:	2c0f      	cmp	r4, #15
 8003590:	f67f af27 	bls.w	80033e2 <HAL_GPIO_Init+0xa>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8003594:	b003      	add	sp, #12
 8003596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003598:	10210000 	.word	0x10210000
 800359c:	10310000 	.word	0x10310000
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40010800 	.word	0x40010800
 80035ac:	40010400 	.word	0x40010400

080035b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b0:	b10a      	cbz	r2, 80035b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	6101      	str	r1, [r0, #16]
 80035b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035b6:	0409      	lsls	r1, r1, #16
 80035b8:	6101      	str	r1, [r0, #16]
 80035ba:	4770      	bx	lr

080035bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4a07      	ldr	r2, [pc, #28]	; (80035dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80035c8:	0200      	lsls	r0, r0, #8
 80035ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ce:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80035d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80035d4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80035d8:	60d0      	str	r0, [r2, #12]
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e2:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_NVIC_SetPriority+0x5c>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ea:	f1c3 0407 	rsb	r4, r3, #7
 80035ee:	2c04      	cmp	r4, #4
 80035f0:	bf28      	it	cs
 80035f2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f4:	1d1d      	adds	r5, r3, #4
 80035f6:	2d06      	cmp	r5, #6
 80035f8:	d901      	bls.n	80035fe <HAL_NVIC_SetPriority+0x1e>
 80035fa:	1edd      	subs	r5, r3, #3
 80035fc:	e000      	b.n	8003600 <HAL_NVIC_SetPriority+0x20>
 80035fe:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	2301      	movs	r3, #1
 8003602:	fa03 f404 	lsl.w	r4, r3, r4
 8003606:	3c01      	subs	r4, #1
 8003608:	4021      	ands	r1, r4
 800360a:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	40ab      	lsls	r3, r5
 800360e:	3b01      	subs	r3, #1
 8003610:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003612:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003614:	2800      	cmp	r0, #0
 8003616:	da06      	bge.n	8003626 <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	f000 000f 	and.w	r0, r0, #15
 800361c:	0112      	lsls	r2, r2, #4
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <HAL_NVIC_SetPriority+0x60>)
 8003622:	541a      	strb	r2, [r3, r0]
 8003624:	e007      	b.n	8003636 <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800362e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003632:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003636:	bc30      	pop	{r4, r5}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000ed00 	.word	0xe000ed00
 8003640:	e000ed14 	.word	0xe000ed14

08003644 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003644:	0942      	lsrs	r2, r0, #5
 8003646:	f000 001f 	and.w	r0, r0, #31
 800364a:	2301      	movs	r3, #1
 800364c:	fa03 f000 	lsl.w	r0, r3, r0
 8003650:	4b01      	ldr	r3, [pc, #4]	; (8003658 <HAL_NVIC_EnableIRQ+0x14>)
 8003652:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003656:	4770      	bx	lr
 8003658:	e000e100 	.word	0xe000e100

0800365c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800365c:	3801      	subs	r0, #1
 800365e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003662:	d20a      	bcs.n	800367a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_SYSTICK_Config+0x24>)
 8003666:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003668:	21f0      	movs	r1, #240	; 0xf0
 800366a:	4a06      	ldr	r2, [pc, #24]	; (8003684 <HAL_SYSTICK_Config+0x28>)
 800366c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	2000      	movs	r0, #0
 8003672:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e010 	.word	0xe000e010
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003688:	2804      	cmp	r0, #4
 800368a:	d105      	bne.n	8003698 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800368c:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4770      	bx	lr
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003698:	4a02      	ldr	r2, [pc, #8]	; (80036a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4770      	bx	lr
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop

080036ac <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80036ac:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80036ae:	f7ff fffb 	bl	80036a8 <HAL_SYSTICK_Callback>
 80036b2:	bd08      	pop	{r3, pc}

080036b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b4:	b510      	push	{r4, lr}
 80036b6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80036b8:	f7ff f9f4 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_InitTick+0x24>)
 80036be:	fba3 3000 	umull	r3, r0, r3, r0
 80036c2:	0980      	lsrs	r0, r0, #6
 80036c4:	f7ff ffca 	bl	800365c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	4621      	mov	r1, r4
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f7ff ff86 	bl	80035e0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80036d4:	2000      	movs	r0, #0
 80036d6:	bd10      	pop	{r4, pc}
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036dc:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036de:	4a07      	ldr	r2, [pc, #28]	; (80036fc <HAL_Init+0x20>)
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	f043 0310 	orr.w	r3, r3, #16
 80036e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f7ff ff67 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7ff ffe0 	bl	80036b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f4:	f7fc ff1a 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80036f8:	2000      	movs	r0, #0
 80036fa:	bd08      	pop	{r3, pc}
 80036fc:	40022000 	.word	0x40022000

08003700 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003700:	4a02      	ldr	r2, [pc, #8]	; (800370c <HAL_IncTick+0xc>)
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	200018a8 	.word	0x200018a8

08003710 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003710:	4b01      	ldr	r3, [pc, #4]	; (8003718 <HAL_GetTick+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	200018a8 	.word	0x200018a8

0800371c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800371c:	b510      	push	{r4, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8003722:	f7ff fff5 	bl	8003710 <HAL_GetTick>
 8003726:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003728:	f7ff fff2 	bl	8003710 <HAL_GetTick>
 800372c:	1b00      	subs	r0, r0, r4
 800372e:	9b01      	ldr	r3, [sp, #4]
 8003730:	4298      	cmp	r0, r3
 8003732:	d3f9      	bcc.n	8003728 <HAL_Delay+0xc>
  {
  }
}
 8003734:	b002      	add	sp, #8
 8003736:	bd10      	pop	{r4, pc}

08003738 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <SystemInit+0x40>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <SystemInit+0x44>)
 8003746:	400a      	ands	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003750:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003754:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800375c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003764:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003766:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800376a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800376c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <SystemInit+0x48>)
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	f8ff0000 	.word	0xf8ff0000
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003784:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003786:	e003      	b.n	8003790 <LoopCopyDataInit>

08003788 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800378a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800378c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800378e:	3104      	adds	r1, #4

08003790 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003790:	480a      	ldr	r0, [pc, #40]	; (80037bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003794:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003796:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003798:	d3f6      	bcc.n	8003788 <CopyDataInit>
  ldr r2, =_sbss
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800379c:	e002      	b.n	80037a4 <LoopFillZerobss>

0800379e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80037a0:	f842 3b04 	str.w	r3, [r2], #4

080037a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80037a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80037a8:	d3f9      	bcc.n	800379e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037aa:	f7ff ffc5 	bl	8003738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ae:	f000 f813 	bl	80037d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037b2:	f7fd f83f 	bl	8000834 <main>
  bx lr
 80037b6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80037b8:	08003d5c 	.word	0x08003d5c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80037bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80037c0:	20001664 	.word	0x20001664
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80037c4:	20001664 	.word	0x20001664
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80037c8:	20002360 	.word	0x20002360

080037cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC1_2_IRQHandler>

080037ce <atoi>:
 80037ce:	220a      	movs	r2, #10
 80037d0:	2100      	movs	r1, #0
 80037d2:	f000 b8c7 	b.w	8003964 <strtol>
	...

080037d8 <__libc_init_array>:
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <__libc_init_array+0x3c>)
 80037da:	b570      	push	{r4, r5, r6, lr}
 80037dc:	461e      	mov	r6, r3
 80037de:	4c0e      	ldr	r4, [pc, #56]	; (8003818 <__libc_init_array+0x40>)
 80037e0:	2500      	movs	r5, #0
 80037e2:	1ae4      	subs	r4, r4, r3
 80037e4:	10a4      	asrs	r4, r4, #2
 80037e6:	42a5      	cmp	r5, r4
 80037e8:	d004      	beq.n	80037f4 <__libc_init_array+0x1c>
 80037ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ee:	4798      	blx	r3
 80037f0:	3501      	adds	r5, #1
 80037f2:	e7f8      	b.n	80037e6 <__libc_init_array+0xe>
 80037f4:	f000 f9e2 	bl	8003bbc <_init>
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <__libc_init_array+0x44>)
 80037fa:	4c09      	ldr	r4, [pc, #36]	; (8003820 <__libc_init_array+0x48>)
 80037fc:	461e      	mov	r6, r3
 80037fe:	1ae4      	subs	r4, r4, r3
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	2500      	movs	r5, #0
 8003804:	42a5      	cmp	r5, r4
 8003806:	d004      	beq.n	8003812 <__libc_init_array+0x3a>
 8003808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800380c:	4798      	blx	r3
 800380e:	3501      	adds	r5, #1
 8003810:	e7f8      	b.n	8003804 <__libc_init_array+0x2c>
 8003812:	bd70      	pop	{r4, r5, r6, pc}
 8003814:	08003d54 	.word	0x08003d54
 8003818:	08003d54 	.word	0x08003d54
 800381c:	08003d54 	.word	0x08003d54
 8003820:	08003d58 	.word	0x08003d58

08003824 <free>:
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <free+0xc>)
 8003826:	4601      	mov	r1, r0
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	f000 b8fb 	b.w	8003a24 <_free_r>
 800382e:	bf00      	nop
 8003830:	20001660 	.word	0x20001660

08003834 <__malloc_lock>:
 8003834:	4770      	bx	lr

08003836 <__malloc_unlock>:
 8003836:	4770      	bx	lr

08003838 <_sbrk_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4c06      	ldr	r4, [pc, #24]	; (8003854 <_sbrk_r+0x1c>)
 800383c:	2300      	movs	r3, #0
 800383e:	4605      	mov	r5, r0
 8003840:	4608      	mov	r0, r1
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	f000 f9ac 	bl	8003ba0 <_sbrk>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <_sbrk_r+0x1a>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	b103      	cbz	r3, 8003852 <_sbrk_r+0x1a>
 8003850:	602b      	str	r3, [r5, #0]
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	2000235c 	.word	0x2000235c

08003858 <_strtol_r>:
 8003858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	460f      	mov	r7, r1
 800385e:	4680      	mov	r8, r0
 8003860:	483f      	ldr	r0, [pc, #252]	; (8003960 <_strtol_r+0x108>)
 8003862:	f8d0 9000 	ldr.w	r9, [r0]
 8003866:	463d      	mov	r5, r7
 8003868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800386c:	eb09 0004 	add.w	r0, r9, r4
 8003870:	7840      	ldrb	r0, [r0, #1]
 8003872:	f000 0008 	and.w	r0, r0, #8
 8003876:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 800387a:	b108      	cbz	r0, 8003880 <_strtol_r+0x28>
 800387c:	462f      	mov	r7, r5
 800387e:	e7f2      	b.n	8003866 <_strtol_r+0xe>
 8003880:	2c2d      	cmp	r4, #45	; 0x2d
 8003882:	d103      	bne.n	800388c <_strtol_r+0x34>
 8003884:	1cbd      	adds	r5, r7, #2
 8003886:	787c      	ldrb	r4, [r7, #1]
 8003888:	2601      	movs	r6, #1
 800388a:	e003      	b.n	8003894 <_strtol_r+0x3c>
 800388c:	2c2b      	cmp	r4, #43	; 0x2b
 800388e:	bf04      	itt	eq
 8003890:	787c      	ldrbeq	r4, [r7, #1]
 8003892:	1cbd      	addeq	r5, r7, #2
 8003894:	b113      	cbz	r3, 800389c <_strtol_r+0x44>
 8003896:	2b10      	cmp	r3, #16
 8003898:	d10a      	bne.n	80038b0 <_strtol_r+0x58>
 800389a:	e05b      	b.n	8003954 <_strtol_r+0xfc>
 800389c:	2c30      	cmp	r4, #48	; 0x30
 800389e:	d157      	bne.n	8003950 <_strtol_r+0xf8>
 80038a0:	7828      	ldrb	r0, [r5, #0]
 80038a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80038a6:	2858      	cmp	r0, #88	; 0x58
 80038a8:	d14d      	bne.n	8003946 <_strtol_r+0xee>
 80038aa:	786c      	ldrb	r4, [r5, #1]
 80038ac:	2310      	movs	r3, #16
 80038ae:	3502      	adds	r5, #2
 80038b0:	2e00      	cmp	r6, #0
 80038b2:	bf14      	ite	ne
 80038b4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80038b8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80038bc:	fbbc faf3 	udiv	sl, ip, r3
 80038c0:	2700      	movs	r7, #0
 80038c2:	4638      	mov	r0, r7
 80038c4:	fb03 cc1a 	mls	ip, r3, sl, ip
 80038c8:	eb09 0e04 	add.w	lr, r9, r4
 80038cc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80038d0:	f01e 0f04 	tst.w	lr, #4
 80038d4:	d001      	beq.n	80038da <_strtol_r+0x82>
 80038d6:	3c30      	subs	r4, #48	; 0x30
 80038d8:	e00b      	b.n	80038f2 <_strtol_r+0x9a>
 80038da:	f01e 0e03 	ands.w	lr, lr, #3
 80038de:	d01b      	beq.n	8003918 <_strtol_r+0xc0>
 80038e0:	f1be 0f01 	cmp.w	lr, #1
 80038e4:	bf0c      	ite	eq
 80038e6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80038ea:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80038ee:	ebce 0404 	rsb	r4, lr, r4
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	dd10      	ble.n	8003918 <_strtol_r+0xc0>
 80038f6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80038fa:	d00a      	beq.n	8003912 <_strtol_r+0xba>
 80038fc:	4550      	cmp	r0, sl
 80038fe:	d806      	bhi.n	800390e <_strtol_r+0xb6>
 8003900:	d101      	bne.n	8003906 <_strtol_r+0xae>
 8003902:	4564      	cmp	r4, ip
 8003904:	dc03      	bgt.n	800390e <_strtol_r+0xb6>
 8003906:	fb03 4000 	mla	r0, r3, r0, r4
 800390a:	2701      	movs	r7, #1
 800390c:	e001      	b.n	8003912 <_strtol_r+0xba>
 800390e:	f04f 37ff 	mov.w	r7, #4294967295
 8003912:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003916:	e7d7      	b.n	80038c8 <_strtol_r+0x70>
 8003918:	1c7b      	adds	r3, r7, #1
 800391a:	d10c      	bne.n	8003936 <_strtol_r+0xde>
 800391c:	2e00      	cmp	r6, #0
 800391e:	f04f 0322 	mov.w	r3, #34	; 0x22
 8003922:	bf14      	ite	ne
 8003924:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8003928:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800392c:	f8c8 3000 	str.w	r3, [r8]
 8003930:	b92a      	cbnz	r2, 800393e <_strtol_r+0xe6>
 8003932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003936:	b106      	cbz	r6, 800393a <_strtol_r+0xe2>
 8003938:	4240      	negs	r0, r0
 800393a:	b172      	cbz	r2, 800395a <_strtol_r+0x102>
 800393c:	b107      	cbz	r7, 8003940 <_strtol_r+0xe8>
 800393e:	1e69      	subs	r1, r5, #1
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003946:	2430      	movs	r4, #48	; 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1b1      	bne.n	80038b0 <_strtol_r+0x58>
 800394c:	2308      	movs	r3, #8
 800394e:	e7af      	b.n	80038b0 <_strtol_r+0x58>
 8003950:	230a      	movs	r3, #10
 8003952:	e7ad      	b.n	80038b0 <_strtol_r+0x58>
 8003954:	2c30      	cmp	r4, #48	; 0x30
 8003956:	d0a3      	beq.n	80038a0 <_strtol_r+0x48>
 8003958:	e7aa      	b.n	80038b0 <_strtol_r+0x58>
 800395a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800395e:	bf00      	nop
 8003960:	2000156c 	.word	0x2000156c

08003964 <strtol>:
 8003964:	4613      	mov	r3, r2
 8003966:	460a      	mov	r2, r1
 8003968:	4601      	mov	r1, r0
 800396a:	4802      	ldr	r0, [pc, #8]	; (8003974 <strtol+0x10>)
 800396c:	6800      	ldr	r0, [r0, #0]
 800396e:	f7ff bf73 	b.w	8003858 <_strtol_r>
 8003972:	bf00      	nop
 8003974:	20001660 	.word	0x20001660

08003978 <_malloc_trim_r>:
 8003978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800397c:	4689      	mov	r9, r1
 800397e:	4f25      	ldr	r7, [pc, #148]	; (8003a14 <_malloc_trim_r+0x9c>)
 8003980:	4606      	mov	r6, r0
 8003982:	f7ff ff57 	bl	8003834 <__malloc_lock>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003a20 <_malloc_trim_r+0xa8>
 800398c:	685d      	ldr	r5, [r3, #4]
 800398e:	f1a8 0411 	sub.w	r4, r8, #17
 8003992:	f025 0503 	bic.w	r5, r5, #3
 8003996:	442c      	add	r4, r5
 8003998:	ebc9 0404 	rsb	r4, r9, r4
 800399c:	fbb4 f4f8 	udiv	r4, r4, r8
 80039a0:	3c01      	subs	r4, #1
 80039a2:	fb08 f404 	mul.w	r4, r8, r4
 80039a6:	4544      	cmp	r4, r8
 80039a8:	da05      	bge.n	80039b6 <_malloc_trim_r+0x3e>
 80039aa:	4630      	mov	r0, r6
 80039ac:	f7ff ff43 	bl	8003836 <__malloc_unlock>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b6:	2100      	movs	r1, #0
 80039b8:	4630      	mov	r0, r6
 80039ba:	f7ff ff3d 	bl	8003838 <_sbrk_r>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	442b      	add	r3, r5
 80039c2:	4298      	cmp	r0, r3
 80039c4:	d1f1      	bne.n	80039aa <_malloc_trim_r+0x32>
 80039c6:	4261      	negs	r1, r4
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7ff ff35 	bl	8003838 <_sbrk_r>
 80039ce:	3001      	adds	r0, #1
 80039d0:	d110      	bne.n	80039f4 <_malloc_trim_r+0x7c>
 80039d2:	2100      	movs	r1, #0
 80039d4:	4630      	mov	r0, r6
 80039d6:	f7ff ff2f 	bl	8003838 <_sbrk_r>
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	1a83      	subs	r3, r0, r2
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	dde3      	ble.n	80039aa <_malloc_trim_r+0x32>
 80039e2:	490d      	ldr	r1, [pc, #52]	; (8003a18 <_malloc_trim_r+0xa0>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6809      	ldr	r1, [r1, #0]
 80039ea:	6053      	str	r3, [r2, #4]
 80039ec:	1a40      	subs	r0, r0, r1
 80039ee:	490b      	ldr	r1, [pc, #44]	; (8003a1c <_malloc_trim_r+0xa4>)
 80039f0:	6008      	str	r0, [r1, #0]
 80039f2:	e7da      	b.n	80039aa <_malloc_trim_r+0x32>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <_malloc_trim_r+0xa4>)
 80039f8:	1b2d      	subs	r5, r5, r4
 80039fa:	f045 0501 	orr.w	r5, r5, #1
 80039fe:	605d      	str	r5, [r3, #4]
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	4630      	mov	r0, r6
 8003a04:	1b1c      	subs	r4, r3, r4
 8003a06:	6014      	str	r4, [r2, #0]
 8003a08:	f7ff ff15 	bl	8003836 <__malloc_unlock>
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a12:	bf00      	nop
 8003a14:	2000115c 	.word	0x2000115c
 8003a18:	20001568 	.word	0x20001568
 8003a1c:	200018b0 	.word	0x200018b0
 8003a20:	00000080 	.word	0x00000080

08003a24 <_free_r>:
 8003a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a28:	4604      	mov	r4, r0
 8003a2a:	4688      	mov	r8, r1
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	f000 80ad 	beq.w	8003b8c <_free_r+0x168>
 8003a32:	f7ff feff 	bl	8003834 <__malloc_lock>
 8003a36:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8003a3a:	4d55      	ldr	r5, [pc, #340]	; (8003b90 <_free_r+0x16c>)
 8003a3c:	f022 0001 	bic.w	r0, r2, #1
 8003a40:	f1a8 0308 	sub.w	r3, r8, #8
 8003a44:	181f      	adds	r7, r3, r0
 8003a46:	68a9      	ldr	r1, [r5, #8]
 8003a48:	687e      	ldr	r6, [r7, #4]
 8003a4a:	428f      	cmp	r7, r1
 8003a4c:	f026 0603 	bic.w	r6, r6, #3
 8003a50:	f002 0201 	and.w	r2, r2, #1
 8003a54:	d11b      	bne.n	8003a8e <_free_r+0x6a>
 8003a56:	4430      	add	r0, r6
 8003a58:	b93a      	cbnz	r2, 8003a6a <_free_r+0x46>
 8003a5a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	6899      	ldr	r1, [r3, #8]
 8003a62:	4410      	add	r0, r2
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	60ca      	str	r2, [r1, #12]
 8003a68:	6091      	str	r1, [r2, #8]
 8003a6a:	f040 0201 	orr.w	r2, r0, #1
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	60ab      	str	r3, [r5, #8]
 8003a72:	4b48      	ldr	r3, [pc, #288]	; (8003b94 <_free_r+0x170>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4298      	cmp	r0, r3
 8003a78:	d304      	bcc.n	8003a84 <_free_r+0x60>
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <_free_r+0x174>)
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	f7ff ff7a 	bl	8003978 <_malloc_trim_r>
 8003a84:	4620      	mov	r0, r4
 8003a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8a:	f7ff bed4 	b.w	8003836 <__malloc_unlock>
 8003a8e:	607e      	str	r6, [r7, #4]
 8003a90:	b97a      	cbnz	r2, 8003ab2 <_free_r+0x8e>
 8003a92:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8003a96:	f105 0e08 	add.w	lr, r5, #8
 8003a9a:	1a5b      	subs	r3, r3, r1
 8003a9c:	4408      	add	r0, r1
 8003a9e:	6899      	ldr	r1, [r3, #8]
 8003aa0:	4571      	cmp	r1, lr
 8003aa2:	d008      	beq.n	8003ab6 <_free_r+0x92>
 8003aa4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003aa8:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003aac:	f8ce 1008 	str.w	r1, [lr, #8]
 8003ab0:	e002      	b.n	8003ab8 <_free_r+0x94>
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	e000      	b.n	8003ab8 <_free_r+0x94>
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	19b9      	adds	r1, r7, r6
 8003aba:	6849      	ldr	r1, [r1, #4]
 8003abc:	07c9      	lsls	r1, r1, #31
 8003abe:	d40e      	bmi.n	8003ade <_free_r+0xba>
 8003ac0:	4430      	add	r0, r6
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	b942      	cbnz	r2, 8003ad8 <_free_r+0xb4>
 8003ac6:	4e35      	ldr	r6, [pc, #212]	; (8003b9c <_free_r+0x178>)
 8003ac8:	42b1      	cmp	r1, r6
 8003aca:	d105      	bne.n	8003ad8 <_free_r+0xb4>
 8003acc:	616b      	str	r3, [r5, #20]
 8003ace:	612b      	str	r3, [r5, #16]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	60d9      	str	r1, [r3, #12]
 8003ad4:	6099      	str	r1, [r3, #8]
 8003ad6:	e002      	b.n	8003ade <_free_r+0xba>
 8003ad8:	68fe      	ldr	r6, [r7, #12]
 8003ada:	60ce      	str	r6, [r1, #12]
 8003adc:	60b1      	str	r1, [r6, #8]
 8003ade:	f040 0101 	orr.w	r1, r0, #1
 8003ae2:	6059      	str	r1, [r3, #4]
 8003ae4:	5018      	str	r0, [r3, r0]
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	d1cc      	bne.n	8003a84 <_free_r+0x60>
 8003aea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003aee:	d212      	bcs.n	8003b16 <_free_r+0xf2>
 8003af0:	08c0      	lsrs	r0, r0, #3
 8003af2:	1081      	asrs	r1, r0, #2
 8003af4:	2201      	movs	r2, #1
 8003af6:	fa02 f101 	lsl.w	r1, r2, r1
 8003afa:	686a      	ldr	r2, [r5, #4]
 8003afc:	3001      	adds	r0, #1
 8003afe:	430a      	orrs	r2, r1
 8003b00:	606a      	str	r2, [r5, #4]
 8003b02:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8003b06:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003b0a:	3a08      	subs	r2, #8
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	6099      	str	r1, [r3, #8]
 8003b10:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8003b14:	e038      	b.n	8003b88 <_free_r+0x164>
 8003b16:	0a42      	lsrs	r2, r0, #9
 8003b18:	2a04      	cmp	r2, #4
 8003b1a:	d802      	bhi.n	8003b22 <_free_r+0xfe>
 8003b1c:	0982      	lsrs	r2, r0, #6
 8003b1e:	3238      	adds	r2, #56	; 0x38
 8003b20:	e015      	b.n	8003b4e <_free_r+0x12a>
 8003b22:	2a14      	cmp	r2, #20
 8003b24:	d801      	bhi.n	8003b2a <_free_r+0x106>
 8003b26:	325b      	adds	r2, #91	; 0x5b
 8003b28:	e011      	b.n	8003b4e <_free_r+0x12a>
 8003b2a:	2a54      	cmp	r2, #84	; 0x54
 8003b2c:	d802      	bhi.n	8003b34 <_free_r+0x110>
 8003b2e:	0b02      	lsrs	r2, r0, #12
 8003b30:	326e      	adds	r2, #110	; 0x6e
 8003b32:	e00c      	b.n	8003b4e <_free_r+0x12a>
 8003b34:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003b38:	d802      	bhi.n	8003b40 <_free_r+0x11c>
 8003b3a:	0bc2      	lsrs	r2, r0, #15
 8003b3c:	3277      	adds	r2, #119	; 0x77
 8003b3e:	e006      	b.n	8003b4e <_free_r+0x12a>
 8003b40:	f240 5154 	movw	r1, #1364	; 0x554
 8003b44:	428a      	cmp	r2, r1
 8003b46:	bf9a      	itte	ls
 8003b48:	0c82      	lsrls	r2, r0, #18
 8003b4a:	327c      	addls	r2, #124	; 0x7c
 8003b4c:	227e      	movhi	r2, #126	; 0x7e
 8003b4e:	1c51      	adds	r1, r2, #1
 8003b50:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8003b54:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8003b58:	428e      	cmp	r6, r1
 8003b5a:	4f0d      	ldr	r7, [pc, #52]	; (8003b90 <_free_r+0x16c>)
 8003b5c:	d10b      	bne.n	8003b76 <_free_r+0x152>
 8003b5e:	2101      	movs	r1, #1
 8003b60:	1092      	asrs	r2, r2, #2
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	6079      	str	r1, [r7, #4]
 8003b6c:	4631      	mov	r1, r6
 8003b6e:	e008      	b.n	8003b82 <_free_r+0x15e>
 8003b70:	6889      	ldr	r1, [r1, #8]
 8003b72:	428e      	cmp	r6, r1
 8003b74:	d004      	beq.n	8003b80 <_free_r+0x15c>
 8003b76:	684a      	ldr	r2, [r1, #4]
 8003b78:	f022 0203 	bic.w	r2, r2, #3
 8003b7c:	4290      	cmp	r0, r2
 8003b7e:	d3f7      	bcc.n	8003b70 <_free_r+0x14c>
 8003b80:	68ce      	ldr	r6, [r1, #12]
 8003b82:	60de      	str	r6, [r3, #12]
 8003b84:	6099      	str	r1, [r3, #8]
 8003b86:	60b3      	str	r3, [r6, #8]
 8003b88:	60cb      	str	r3, [r1, #12]
 8003b8a:	e77b      	b.n	8003a84 <_free_r+0x60>
 8003b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b90:	2000115c 	.word	0x2000115c
 8003b94:	20001564 	.word	0x20001564
 8003b98:	200018ac 	.word	0x200018ac
 8003b9c:	20001164 	.word	0x20001164

08003ba0 <_sbrk>:
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <_sbrk+0x14>)
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	b909      	cbnz	r1, 8003bac <_sbrk+0xc>
 8003ba8:	4903      	ldr	r1, [pc, #12]	; (8003bb8 <_sbrk+0x18>)
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	4402      	add	r2, r0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	4770      	bx	lr
 8003bb4:	200018d8 	.word	0x200018d8
 8003bb8:	20002360 	.word	0x20002360

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
